import pymysql
import secrets
import logging
import asyncio
import requests  # üìå –î–ª—è –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ Django API
from aiogram import Bot, Dispatcher, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.enums import ChatMemberStatus
from aiogram.types import ChatMember


# üîê –ù–∞—Å—Ç—Ä–æ–π–∫–∏
TOKEN = "7961799288:AAHuDweWsXvyHR05aumNNhztz2bwd-O3xcs"
DB_HOST = "localhost"
DB_USER = "root"
DB_PASSWORD = "root"
DB_NAME = "tutor_project"
BOT_USERNAME = "GFive_Guroo_bot"
GROUP_ID = -1002569023276

LOCAL_IP = "172.19.227.124"
DJANGO_API = f"http://{LOCAL_IP}:8000/"

# üìå –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)

# üîå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–æ—Ç—É
bot = Bot(token=TOKEN)
dp = Dispatcher()

# üìå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
def get_connection():
    return pymysql.connect(
        host=DB_HOST, user=DB_USER, password=DB_PASSWORD, database=DB_NAME, charset="utf8mb4"
    )

# ‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def is_user_registered(telegram_id):
    print(f"–ó–∞–ø—Ä–æ—Å –∫ API: {DJANGO_API}check_user_registration/?user_id={telegram_id}")
    response = requests.get(f"{DJANGO_API}check_user_registration/?user_id={telegram_id}")
    data = response.json()
    return data.get("registered", False)

# ‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞, –≤—ã–¥–∞–≤–∞–ª–∞—Å—å –ª–∏ —Å—Å—ã–ª–∫–∞ —ç—Ç–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
def get_unused_link(user_id):
    conn = get_connection()
    cursor = conn.cursor()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∞–∫—Ç–∏–≤–Ω–∞—è —Å—Å—ã–ª–∫–∞
    cursor.execute("SELECT token FROM tutor_app_tokens WHERE user_id = %s AND status = 'unused'", (user_id,))
    row = cursor.fetchone()

    if row:
        token = row[0]
        link = f"http://{LOCAL_IP}:8000/tutor_signup/{token}/"
        return link

    # –ï—Å–ª–∏ –Ω–µ—Ç ‚Äî —Å–æ–∑–¥–∞—ë–º –Ω–æ–≤—É—é
    token = secrets.token_urlsafe(24)
    link = f"http://{LOCAL_IP}:8000/tutor_signup/{token}/"

    cursor.execute(
        "INSERT INTO tutor_app_tokens (token, link, user_id, status) VALUES (%s, %s, %s, 'unused')",
        (token, link, user_id)
    )
    conn.commit()
    return link

@dp.message(lambda message: message.text == "/checkme")
async def check_user_in_group(message: types.Message):
    user_id = message.from_user.id
    try:
        member = await bot.get_chat_member(GROUP_ID, user_id)
        await message.reply(f"‚úÖ –¢–≤–æ–π —Å—Ç–∞—Ç—É—Å –≤ –≥—Ä—É–ø–ø–µ: {member.status}")
    except Exception as e:
        await message.reply(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏: {e}")


async def is_user_in_group(user_id):
    """ –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Å–æ—Å—Ç–æ–∏—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –≥—Ä—É–ø–ø–µ """
    try:
        member = await bot.get_chat_member(GROUP_ID, user_id)
        logging.info(f"üìå –°—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –≤ –≥—Ä—É–ø–ø–µ: {member.status}")  # ‚úÖ –õ–æ–≥–∏—Ä—É–µ–º —Å—Ç–∞—Ç—É—Å
        
        # ‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–æ–≤ –±–µ–∑ ChatMemberStatus
        return member.status in ["member", "administrator", "creator"]
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≥—Ä—É–ø–ø—ã: {e}")
        return False

@dp.message(lambda message: message.chat.type == "private" and message.text == "/start")
async def send_link_to_user(message: types.Message):
    user_id = message.from_user.id

    # ‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞, —Å–æ—Å—Ç–æ–∏—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –≥—Ä—É–ø–ø–µ
    if not await is_user_in_group(user_id):
        await message.reply("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω! –í–∞–º –Ω—É–∂–Ω–æ —Å–Ω–∞—á–∞–ª–∞ –≤—Å—Ç—É–ø–∏—Ç—å –≤ –Ω–∞—à—É –≥—Ä—É–ø–ø—É.")
        return

    if is_user_registered(user_id):
        await message.reply("–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã! üéì")
        return

    conn = get_connection()
    cursor = conn.cursor()

    cursor.execute("SELECT link FROM tutor_app_tokens WHERE user_id = %s", (user_id,))
    row = cursor.fetchone()

    if row:
        link = row[0]
        await message.reply(f"üéì –í—ã —É–∂–µ –ø–æ–ª—É—á–∏–ª–∏ —Å—Å—ã–ª–∫—É –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é!\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –µ—ë, —á—Ç–æ–±—ã –∑–∞–≤–µ—Ä—à–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å: {link}")
    else:
        link = get_unused_link(user_id)
        await message.reply(
            f"üéì –ü—Ä–∏–≤–µ—Ç, {message.from_user.full_name}!\n–í–æ—Ç —Ç–≤–æ—è —É–Ω–∏–∫–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {link}",
            protect_content=True  # üîí –ó–∞—â–∏—Ç–∞ –æ—Ç –ø–µ—Ä–µ—Å—ã–ª–∫–∏
        )

    conn.close()

# ‚úÖ –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –Ω–æ–≤—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤ —Å—É–ø–µ—Ä–≥—Ä—É–ø–ø–µ
@dp.chat_member()
async def track_new_members(update: types.ChatMemberUpdated):
    logging.info(f"üîç –ù–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ –≤ –≥—Ä—É–ø–ø–µ: {update}")

    if update.new_chat_member.status == ChatMemberStatus.MEMBER:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ–±–∞–≤–∏–ª–∏ –ª–∏ –Ω–æ–≤–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞
        user_id = update.new_chat_member.user.id
        first_name = update.new_chat_member.user.first_name
        mention = f"[{first_name}](tg://user?id={user_id})"

        logging.info(f"‚úÖ –ù–æ–≤—ã–π —É—á–∞—Å—Ç–Ω–∏–∫: {first_name} (ID: {user_id})")

        # ‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–ü–µ—Ä–µ–π—Ç–∏ –≤ –±–æ—Ç–∞ ü§ñ", url=f"https://t.me/{BOT_USERNAME}?start=start")]
        ])

        await bot.send_message(
            update.chat.id,
            f"üéì –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {mention}! –ß—Ç–æ–±—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ üëá",
            parse_mode="Markdown",
            reply_markup=keyboard
        )

# ‚úÖ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    logging.info("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ —Å–ª—É—à–∞–µ—Ç —Å–æ–±—ã—Ç–∏—è...")
    await dp.start_polling(bot)

if __name__ == "__main__":
    for user_id in range(1011+15, 1016+15):  # –ü—Ä–∏–º–µ—Ä –¥–ª—è 10 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å ID –æ—Ç 1 –¥–æ 10
        link = get_unused_link(user_id)
        print(link)

    asyncio.run(main())
