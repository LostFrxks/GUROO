import json
import os
from django.shortcuts import render, get_object_or_404
from django.http import JsonResponse
from django.core.mail import send_mail
from django.views.decorators.csrf import csrf_exempt
from tutor_app.models import CustomUser, TutorStudent, TutorProfile  # ‚ùå –£–±—Ä–∞–ª–∏ `Tutor`
from django.middleware.csrf import get_token
import random
from django.shortcuts import render, redirect
from django.contrib.auth import authenticate, login, logout, get_user_model
from django.contrib.auth.decorators import login_required
from .models import TutorProfile, TutorInviteToken
from .forms import TutorProfileForm
from datetime import datetime, timedelta 
import pytz
import uuid
import pymysql
from django.db import connection
from django.db import IntegrityError
import socket
from django.shortcuts import render, redirect, get_object_or_404
from django.http import JsonResponse, HttpResponse
from django.contrib.auth.decorators import login_required
from django.conf import settings
from datetime import datetime
from .models import Notification
import openpyxl
from openpyxl.styles import Font
from django.http import FileResponse

DB_HOST = "localhost"
DB_USER = "root"
DB_PASSWORD = "root"
DB_NAME = "tutor_project"


lesson_times = {
    "1": "08:00-09:20",
    "2": "09:30-10:50",
    "3": "11:40-13:00",
    "4": "13:10-14:30",
    "5": "14:40-16:00",
    "6": "16:00-17:20",
    "7": "17:30-19:00"
}


def api_home(request):
    return JsonResponse({"message": "API —Ä–∞–±–æ—Ç–∞–µ—Ç!"})

def main_page(request):
    return render(request, "tutor_app/main.html")

def about_page(request):
    return render(request, "tutor_app/about.html")

def index(request):
    return render(request, "tutor_app/tutors.html")  # –°—Ç—Ä–∞–Ω–∏—Ü–∞ —Ç—å—é—Ç–æ—Ä–æ–≤

def get_server_ip():
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ IP —Å–µ—Ä–≤–µ—Ä–∞."""
    try:
        return socket.gethostbyname(socket.gethostname())
    except socket.gaierror:
        return "127.0.0.1"  # –§–æ–ª–ª–±—ç–∫, –µ—Å–ª–∏ IP –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å

# ‚úÖ –¢–µ–ø–µ—Ä—å —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Ç—å—é—Ç–æ—Ä–æ–≤ –ù–ò–ö–û–ì–î–ê –Ω–µ –æ—Ç–∫—Ä–æ–µ—Ç—Å—è –±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏!
@login_required(login_url='/login/')
def index(request):
    if not request.user.is_authenticated:
        return redirect("/login/")  # –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º —Å—Ä–∞–∑—É –Ω–∞ –ª–æ–≥–∏–Ω

    return render(request, 'tutor_app/tutors.html', {"user": request.user})
# ‚úÖ –°—Ç—Ä–∞–Ω–∏—Ü–∞ –ª–æ–≥–∏–Ω–∞ (–µ—Å–ª–∏ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω, —Ä–µ–¥–∏—Ä–µ–∫—Ç –Ω–∞ –≥–ª–∞–≤–Ω—É—é)
def login_page(request):
    if request.user.is_authenticated:
        return redirect("/")
    return render(request, "tutor_app/sign_in.html")

def get_csrf_token(request):
    return JsonResponse({"csrfToken": get_token(request)})

from django.http import JsonResponse
from .models import TutorProfile, TutorStudent
import pytz
from datetime import datetime, timedelta

def get_tutors(request):
    user_id = request.GET.get("user_id")
    
    tutors = TutorProfile.objects.select_related("user").filter(bio__isnull=False).exclude(bio="")    
    
    confirmed_tutors = {
        reg.tutor_id: reg.attended
        for reg in TutorStudent.objects.filter(student_id=user_id, confirmed=True)
    }

    print("üìå Confirmed tutors:", confirmed_tutors)  # üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∫–∞–∫–∏–µ ID –æ–Ω –ø–æ–ª—É—á–∞–µ—Ç
    
    data = []
    for tutor in tutors:
        try:
            relation = TutorStudent.objects.get(tutor=tutor, student_id=user_id)
            if relation.confirmed:
                request_status = "confirmed"
            else:
                request_status = "pending"
        except TutorStudent.DoesNotExist:
            request_status = None

        tutor_data = {
            "id": tutor.id,
            "user_id": tutor.user.id,
            "name": f"{tutor.user.first_name} {tutor.user.last_name}",
            "subject": tutor.subject,
            "bio": tutor.bio,
            "photo": str(tutor.photo) if tutor.photo else "",
            "is_registered": tutor.id in confirmed_tutors,
            "attended": confirmed_tutors.get(tutor.id, False),
            "schedule": tutor.schedule,
            "course": tutor.course,
            "phone": tutor.phone,
            "telegram": tutor.telegram,
            "group": tutor.group,
            "own_course": tutor.own_course,
            "request_status": request_status  # üî• –Ω–æ–≤–æ–µ –ø–æ–ª–µ
        }
        data.append(tutor_data)

    return JsonResponse(data, safe=False)




@csrf_exempt
@login_required(login_url='/login/')
def register_tutor(request, tutor_id, student_id):
    print(f"üîç –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ –∑–∞–ø–∏—Å—å: tutor_id={tutor_id}, student_id={student_id}")

    tutor = get_object_or_404(TutorProfile, id=tutor_id)
    student = get_object_or_404(CustomUser, id=student_id)

    existing_registration = TutorStudent.objects.filter(tutor=tutor, student=student).first()

    if existing_registration:
        if existing_registration.confirmed:
            print("‚ö†Ô∏è –í—ã —É–∂–µ –∑–∞–ø–∏—Å–∞–Ω—ã!")
            return JsonResponse({"success": False, "error": "–í—ã —É–∂–µ –∑–∞–ø–∏—Å–∞–Ω—ã –∫ —ç—Ç–æ–º—É —Ç—å—é—Ç–æ—Ä—É!"}, status=400)
        else:
            print("‚ö†Ô∏è –í—ã —É–∂–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –∑–∞–ø—Ä–æ—Å!")
            return JsonResponse({"success": False, "error": "–í—ã —É–∂–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –∑–∞–ø—Ä–æ—Å! –û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è."}, status=400)

    print("‚úÖ –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å...")
    record = TutorStudent.objects.create(tutor=tutor, student=student, confirmed=False)
    
    server_ip = get_server_ip()
    confirm_link = f"http://{server_ip}:8000/confirm_registration/{record.id}/"
    print(f"üîó –°—Å—ã–ª–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: {confirm_link}")

    send_mail(
        "–ó–∞–ø–∏—Å—å –Ω–∞ –∑–∞–Ω—è—Ç–∏–µ",
        f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {student.email} —Ö–æ—á–µ—Ç –∑–∞–ø–∏—Å–∞—Ç—å—Å—è. –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ: {confirm_link}",
        "admin@site.com",
        [tutor.user.email]
    )

    print(f"üì© Email –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ {tutor.user.email}!")  

    return JsonResponse({"success": True, "message": "–ó–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω! –û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è."})


@csrf_exempt
@login_required(login_url='/login/')
def confirm_registration(request, record_id):
    record = get_object_or_404(TutorStudent, id=record_id)
    record.confirmed = True
    record.save()
    print(f"‚úÖ –ó–∞–ø–∏—Å—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞: {record.student.email} -> {record.tutor.user.email}")
    
    return JsonResponse({"success": True, "message": "–ó–∞–ø–∏—Å—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!"})
    
from django.contrib.auth import authenticate, login
from django.views.decorators.csrf import csrf_exempt
import json

User = get_user_model()  # ‚úÖ –¢–µ–ø–µ—Ä—å Django –∑–Ω–∞–µ—Ç, —á—Ç–æ —É –Ω–∞—Å –∫–∞—Å—Ç–æ–º–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å

# ‚úÖ –õ–æ–≥–∏–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–¥–æ–±–∞–≤–∏–ª –æ–±—Ä–∞–±–æ—Ç–∫—É GET-–∑–∞–ø—Ä–æ—Å–∞)
def user_login(request):
    if request.method == "POST":
        email = request.POST.get("email")
        password = request.POST.get("password")

        if not email or not password:
            return JsonResponse({"error": "–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è!"}, status=400)

        user = authenticate(request, username=email, password=password)
        if user is not None:
            login(request, user)
            return JsonResponse({"success": True, "redirect_url": "/tutors/"})  # ‚úÖ –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Ç—å—é—Ç–æ—Ä–æ–≤
        else:
            return JsonResponse({"error": "–ù–µ–≤–µ—Ä–Ω–∞—è –ø–æ—á—Ç–∞ –∏–ª–∏ –ø–∞—Ä–æ–ª—å"}, status=400)

    return render(request, "tutor_app/sign_in.html")

def user_logout(request):
    logout(request)  # –†–∞–∑–ª–æ–≥–∏–Ω–∏–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    response = JsonResponse({"success": True, "message": "–í—ã –≤—ã—à–ª–∏ –∏–∑ —Å–∏—Å—Ç–µ–º—ã!"})
    
    # ‚ùóÔ∏è–û—á–∏—â–∞–µ–º –∫—ç—à, —á—Ç–æ–±—ã –∫–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥" –Ω–µ —Ä–∞–±–æ—Ç–∞–ª–∞
    response["Cache-Control"] = "no-cache, no-store, must-revalidate"
    response["Pragma"] = "no-cache"
    response["Expires"] = "0"

    return response

# ‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Ç–æ–∂–µ –Ω–µ –º–µ–Ω—è–ª)
@csrf_exempt
def user_register(request):
    if request.method == "POST":
        data = json.loads(request.body)
        username = data.get("username")
        email = data.get("email")
        password = data.get("password")

        if CustomUser.objects.filter(username=username).exists():   
            return JsonResponse({"success": False, "message": "–¢–∞–∫–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –µ—Å—Ç—å!"})

        user = CustomUser.objects.create_user(username=username, email=email, password=password)
        return JsonResponse({"success": True, "message": "–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å!"})

    return JsonResponse({"success": False, "message": "–ú–µ—Ç–æ–¥ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è!"})

@csrf_exempt
@login_required(login_url='/login/')
def mark_attendance(request, tutor_id):
    print(f"üìå –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ—Ç–º–µ—Ç–∫—É –ø–æ—Å–µ—â–µ–Ω–∏—è: tutor_id={tutor_id}")

    # –ü–æ–ª—É—á–∞–µ–º –∑–∞–ø–∏—Å—å –ø–æ—Å–µ—â–µ–Ω–∏—è –ø–æ —Å—Ç—É–¥–µ–Ω—Ç—É –∏ —Ç—å—é—Ç–æ—Ä—É
    record = get_object_or_404(TutorStudent, student_id=request.user.id, tutor_id=tutor_id)

    if not record.confirmed:
        print("‚ùå –û—à–∏–±–∫–∞: –°—Ç—É–¥–µ–Ω—Ç –µ—â–µ –Ω–µ –∑–∞–ø–∏—Å–∞–Ω!")
        return JsonResponse({"success": False, "message": "–í—ã –µ—â—ë –Ω–µ –∑–∞–ø–∏—Å–∞–Ω—ã!"})

    if record.attended:
        print("‚úÖ –°—Ç—É–¥–µ–Ω—Ç —É–∂–µ –æ—Ç–º–µ—Ç–∏–ª—Å—è!")
        return JsonResponse({"success": True, "message": "–í—ã —É–∂–µ –æ—Ç–º–µ—Ç–∏–ª–∏—Å—å!", "attended": True})

    # –û—Ç–º–µ—á–∞–µ–º –ø–æ—Å–µ—â–µ–Ω–∏–µ
    TutorStudent.objects.filter(id=record.id).update(attended=True)

    print(f"‚úÖ –ü–æ—Å–µ—â–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ! Student ID={record.student.id}, Tutor ID={record.tutor.user.id}")

    return JsonResponse({"success": True, "message": "–í—ã –æ—Ç–º–µ—Ç–∏–ª–∏ –ø–æ—Å–µ—â–µ–Ω–∏–µ!", "attended": True})

# –†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –∫–æ–¥–æ–≤ (–ª—É—á—à–µ —Ö—Ä–∞–Ω–∏—Ç—å –≤ –ë–î, –Ω–æ –ø–æ–∫–∞ —Ç–∞–∫)
verification_codes = {}

def index(request):
    return render(request, 'tutor_app/tutors.html')

def register_page(request):
    return render(request, "tutor_app/register.html")

@csrf_exempt
def send_verification_code(request):
    if request.method == "POST":
        data = json.loads(request.body)
        email = data.get("email", "").strip()

        # ‚úÖ –î–æ–±–∞–≤–ª—è–µ–º SELECT —Ç–æ–ª—å–∫–æ –Ω—É–∂–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö (—É—Å–∫–æ—Ä—è–µ—Ç –∑–∞–ø—Ä–æ—Å)
        exists = CustomUser.objects.filter(email=email).values_list("id", flat=True).exists()
        if exists:
            return JsonResponse({"success": False, "error": "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω!"})

        # ‚úÖ –î–∞–ª—å—à–µ –ø—Ä–æ—Ü–µ—Å—Å –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
        verification_code = random.randint(100000, 999999)
        verification_codes[email] = verification_code  

        send_mail(
            "–ö–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è",
            f"–í–∞—à –∫–æ–¥: {verification_code}",
            "admin@site.com",
            [email],
            fail_silently=False,
        )

        return JsonResponse({"success": True, "message": "–ö–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ email!"})

    return JsonResponse({"success": False, "error": "–ù–µ–≤–µ—Ä–Ω—ã–π –º–µ—Ç–æ–¥ –∑–∞–ø—Ä–æ—Å–∞!"})

@csrf_exempt
def verify_code(request):
    if request.method == 'POST':
        data = json.loads(request.body)
        email = data.get("email")
        code = int(data.get("code"))

        print(f"–ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–¥ –¥–ª—è {email}: {code}")

        if email in verification_codes and verification_codes[email] == code:
            del verification_codes[email]  # –£–¥–∞–ª—è–µ–º –∫–æ–¥ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
            request.session["verified_email"] = email  # –°–æ—Ö—Ä–∞–Ω—è–µ–º email –≤ —Å–µ—Å—Å–∏–∏
            request.session.modified = True  # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å–µ—Å—Å–∏—é
            print(f"‚úÖ –ö–æ–¥ –≤–µ—Ä–Ω—ã–π! Email {email} —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ —Å–µ—Å—Å–∏–∏.")
            return JsonResponse({"success": True, "message": "–ö–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω!"})

        print(f"‚ùå –ö–æ–¥ –Ω–µ–≤–µ—Ä–Ω—ã–π –¥–ª—è {email}!")
        return JsonResponse({"success": False, "error": "–ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥!"})

    return JsonResponse({"error": "–ù–µ–≤–µ—Ä–Ω—ã–π –∑–∞–ø—Ä–æ—Å"}, status=400)

def register_form(request):
    # üîí –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∑–∞–ª–æ–≥–∏–Ω–µ–Ω ‚Äî –ø–µ—Ä–µ–±—Ä–æ—Å–∏—Ç—å –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É —Ç—å—é—Ç–æ—Ä–æ–≤
    if request.user.is_authenticated:
        return redirect("/tutors/")

    email = request.session.get("verified_email")
    print(f"üîç [DEBUG] Email –≤ —Å–µ—Å—Å–∏–∏ –ø–µ—Ä–µ–¥ –∑–∞–≥—Ä—É–∑–∫–æ–π —Ñ–æ—Ä–º—ã: {email}")

    if not email:
        return redirect("/register/")

    return render(request, "tutor_app/register_form.html", {"email": email})

from django.contrib.auth import login
from django.shortcuts import redirect
import json
from django.http import JsonResponse
from tutor_app.models import CustomUser
from django.views.decorators.csrf import csrf_exempt

from django.contrib.auth import authenticate, login

@csrf_exempt
def complete_registration(request):
    if request.method == "POST":
        data = json.loads(request.body)
        email = data.get("email")
        first_name = data.get("first_name")
        last_name = data.get("last_name")
        group = data.get("group")
        course = data.get("course")
        password = data.get("password")

        try:
            # ‚úÖ –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user = CustomUser.objects.create_user(email=email, password=password)
            user.first_name = first_name
            user.last_name = last_name
            user.group = group
            user.save()

            # ‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –≤—Ö–æ–¥ –ø–æ—Å–ª–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
            login(request, user)
            print(f"‚úÖ {email} –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –∏ –≤–æ—à–µ–ª!")

        except IntegrityError:
            # ‚ùóÔ∏è –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø—Ä–æ—Å—Ç–æ –≤—Ö–æ–¥–∏–º –≤ –∞–∫–∫–∞—É–Ω—Ç
            print(f"‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {email} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –≤—ã–ø–æ–ª–Ω—è–µ–º –≤—Ö–æ–¥...")

            user = authenticate(request, username=email, password=password)
            if user is not None:
                login(request, user)
                print(f"‚úÖ {email} —É—Å–ø–µ—à–Ω–æ –≤–æ—à–µ–ª!")
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞ –¥–ª—è {email} (–≤–æ–∑–º–æ–∂–Ω–æ, –Ω–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å).")
                return JsonResponse({"success": False, "error": "–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞!"}, status=400)

        return JsonResponse({"success": True})  # ‚ùå –£–±–∏—Ä–∞–µ–º –≤—Ç–æ—Ä–æ–π —Ä–µ–¥–∏—Ä–µ–∫—Ç

    return JsonResponse({"success": False, "error": "–ù–µ–≤–µ—Ä–Ω—ã–π –º–µ—Ç–æ–¥ –∑–∞–ø—Ä–æ—Å–∞!"})




@login_required(login_url='/login/')

def edit_tutor_profile(request):
    if not request.user.is_authenticated or not request.user.is_tutor:
        return redirect("tutors")

    profile, created = TutorProfile.objects.get_or_create(user=request.user)

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –¥–ª—è GET-–∑–∞–ø—Ä–æ—Å–∞
    course = None
    subject = None

    if request.method == "POST":
        form = TutorProfileForm(request.POST, request.FILES, instance=profile)
        if form.is_valid():
            profile = form.save(commit=False)
            course = request.POST.get('course')  # –ü–æ–ª—É—á–∞–µ–º –∫—É—Ä—Å
            subject = request.POST.get('subject')  # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–µ–¥–º–µ—Ç
            telegram = request.POST.get('telegram')
            phone = request.POST.get('phone')
            print(f"–í—ã–±—Ä–∞–Ω–Ω—ã–π –∫—É—Ä—Å: {course}")
            print(f"–í—ã–±—Ä–∞–Ω–Ω—ã–π –ø—Ä–µ–¥–º–µ—Ç: {subject}")
            print(f"—Ç–µ–ª–µ–≥–∞: {telegram}")

            # –û–±–Ω–æ–≤–ª—è–µ–º –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é –∏–∑ User
            profile.first_name = request.user.first_name
            profile.last_name = request.user.last_name
            profile.telegram = telegram
            profile.phone = phone
            # –î–µ–∫–æ–¥–∏—Ä—É–µ–º JSON —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –∏–∑ –∑–∞–ø—Ä–æ—Å–∞
            try:
                schedule_data = json.loads(request.POST.get("schedule", "{}"))
                profile.schedule = schedule_data  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ JSONField
            except json.JSONDecodeError:
                return JsonResponse({"success": False, "errors": {"schedule": ["–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è"]}})

            profile.save()
            return JsonResponse({"success": True})

        return JsonResponse({"success": False, "errors": form.errors})

    else:
        form = TutorProfileForm(instance=profile)

    # –ü–µ—Ä–µ–¥–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç —à–∞–±–ª–æ–Ω–∞
    return render(request, "tutor_app/edit_tutor_profile.html", {
        "form": form,
        "schedule_json": json.dumps(profile.schedule),  # –ü–µ—Ä–µ–¥–∞–µ–º –≤ JSON
        "course": course,  # –ü–µ—Ä–µ–¥–∞–µ–º –∫—É—Ä—Å
        "subject": subject,  # –ü–µ—Ä–µ–¥–∞–µ–º –ø—Ä–µ–¥–º–µ—Ç
    })

# –ü–û–ü–ê–ü –ú–ï–ù–Æ –ü–†–û–§–ò–õ–Ø
def get_registered_tutors(request):
    user_id = request.GET.get("user_id")
    if not user_id:
        return JsonResponse({"error": "User ID required"}, status=400)

    user = CustomUser.objects.get(id=user_id)

    if user.role == "student":
        # ‚úÖ –°—Ç—É–¥–µ–Ω—Ç: –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç—å—é—Ç–æ—Ä–æ–≤, –∫ –∫–æ—Ç–æ—Ä—ã–º –∑–∞–ø–∏—Å–∞–Ω —Å—Ç—É–¥–µ–Ω—Ç
        registered_tutors = TutorStudent.objects.filter(student_id=user_id, confirmed=True).select_related("tutor")

        tutors_list = [
            {
                "name": tutor.tutor.first_name + " " + tutor.tutor.last_name,
                "subject": tutor.tutor.subject
            }
            for tutor in registered_tutors
        ]
        return JsonResponse(tutors_list, safe=False)

    elif user.role == "tutor":
        # ‚úÖ –¢—å—é—Ç–æ—Ä: –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç—É–¥–µ–Ω—Ç–æ–≤, –∑–∞–ø–∏—Å–∞–Ω–Ω—ã—Ö –∫ –Ω–µ–º—É, –∏ —Ç—å—é—Ç–æ—Ä–æ–≤, –∫ –∫–æ—Ç–æ—Ä—ã–º –æ–Ω –∑–∞–ø–∏—Å–∞–Ω
        students = TutorStudent.objects.filter(tutor__user_id=user_id, confirmed=True).select_related("student")
        registered_tutors = TutorStudent.objects.filter(student_id=user_id, confirmed=True).select_related("tutor")

        students_list = [
            {
                "name": student.student.first_name + " " + student.student.last_name,
                "email": student.student.email
            }
            for student in students
        ]

        tutors_list = [
            {
                "name": tutor.tutor.first_name + " " + tutor.tutor.last_name,
                "subject": tutor.tutor.subject
            }
            for tutor in registered_tutors
        ]

        return JsonResponse({"students": students_list, "tutors": tutors_list}, safe=False)

@login_required
def get_tutor_schedule(request):
    user_id = request.GET.get("user_id")

    try:
        tutor = TutorProfile.objects.get(user_id=user_id)
        return JsonResponse(tutor.schedule, safe=False)
    except TutorProfile.DoesNotExist:
        return JsonResponse({"error": "–¢—å—é—Ç–æ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω"}, status=404)
    
# –†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø –¢–¨–Æ–¢–û–†–û–í
def get_connection():
    return pymysql.connect(
        host=DB_HOST, user=DB_USER, password=DB_PASSWORD, database=DB_NAME, charset="utf8mb4"
    )



# ‚úÖ –°—Ç—Ä–∞–Ω–∏—Ü–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
from django.shortcuts import render, get_object_or_404
from .models import TutorInviteToken, TutorProfile, CustomUser

from django.shortcuts import render, get_object_or_404
from .models import TutorInviteToken, TutorProfile, CustomUser

@csrf_exempt
def register_tutor_page(request, token):
    if not token:
        return JsonResponse({"error": "Token is required"}, status=400)

    try:
        conn = get_connection()
        cursor = conn.cursor()

        # –ü–æ–ª—É—á–∞–µ–º Telegram ID –ø–æ —Ç–æ–∫–µ–Ω—É
        cursor.execute("SELECT user_id FROM tutor_app_tokens WHERE token = %s AND status = 'unused'", (token,))
        row = cursor.fetchone()

        if not row:
            return JsonResponse({"error": "Invalid or used token"}, status=400)

        telegram_id = row[0]

        server_ip = get_server_ip()
        confirm_link = f"http://{server_ip}:8000/confirm_registration/{token}/"

        return render(request, "tutor_app/register_tutor.html", {
            "token": token,
            "confirm_link": confirm_link,
            "telegram_id": telegram_id,  # –ø–µ—Ä–µ–¥–∞–π –≤ HTML
            "tutor_name": "",            # –ø–æ–∫–∞ –Ω–µ –∑–Ω–∞–µ–º
            "subject": "",               # –ø–æ–∫–∞ –Ω–µ –∑–Ω–∞–µ–º
        })

    except Exception as e:
        import traceback
        traceback.print_exc()
        return JsonResponse({"error": f"–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {str(e)}"}, status=500)








@csrf_exempt
def complete_tutor_registration(request):
    if request.method == "POST":
        try:
            if request.content_type == "application/json":
                data = json.loads(request.body.decode("utf-8"))
            else:
                data = request.POST

            print("üìå [DEBUG] –ü–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:", data)

            token = data.get("token")
            telegram_id = data.get("telegram_id")
            first_name = data.get("first_name")
            last_name = data.get("last_name")
            group = data.get("group")
            course = data.get("course")
            email = data.get("email")
            password = data.get("password")
            print("üì¶ telegram_id:", telegram_id)  # ‚úÖ –ê –¢–ê–ö–ñ–ï –≠–¢–û
            if not all([token, telegram_id, first_name, last_name, email, password]):
                return JsonResponse({"error": "–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è!"}, status=400)

            if not email.endswith("@auca.kg"):
                return JsonResponse({"error": "Email –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–∞ @auca.kg"}, status=400)

            existing_user = CustomUser.objects.filter(email=email, role="tutor").first()
            if existing_user:
                return JsonResponse({"error": "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–æ–π –ø–æ—á—Ç–æ–π —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –∫–∞–∫ —Ç—å—é—Ç–æ—Ä!"}, status=400)
            
            conn = get_connection()
            cursor = conn.cursor()

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å —Ç–æ–∫–µ–Ω–∞
            cursor.execute("SELECT id FROM tutor_app_tokens WHERE token = %s AND status = 'unused'", (token,))
            row = cursor.fetchone()

            if not row:
                return JsonResponse({"error": "–ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω"}, status=400)

            # –°–æ–∑–¥–∞—ë–º –∏–ª–∏ –ø–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user, created = CustomUser.objects.get_or_create(email=email)

            user.first_name = first_name
            user.last_name = last_name
            user.telegram_id = telegram_id  # üí• –í–æ—Ç –∑–¥–µ—Å—å —Å–æ—Ö—Ä–∞–Ω—è–µ–º ID
            user.role = "tutor"
            user.set_password(password)
            user.save()

            # –°–æ–∑–¥–∞—ë–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å —Ç—å—é—Ç–æ—Ä–∞
            profile, _ = TutorProfile.objects.get_or_create(user=user)
            profile.first_name = first_name
            profile.last_name = last_name
            profile.group = group
            profile.own_course = course
            profile.subject = profile.subject or ""
            profile.save()

            # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–∫–µ–Ω
            cursor.execute("UPDATE tutor_app_tokens SET status = 'used' WHERE token = %s", (token,))
            conn.commit()
            conn.close()

            login(request, user)

            return JsonResponse({"success": True, "message": "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!"})

        except Exception as e:
            import traceback
            traceback.print_exc()
            return JsonResponse({"error": f"–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {str(e)}"}, status=500)

    return JsonResponse({"error": "–ù–µ–≤–µ—Ä–Ω—ã–π –º–µ—Ç–æ–¥ –∑–∞–ø—Ä–æ—Å–∞!"}, status=405)




# BOTTTT
# ‚úÖ API: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞ (–±–æ—Ç –±—É–¥–µ—Ç –≤—ã–∑—ã–≤–∞—Ç—å —ç—Ç–æ—Ç API –ø–µ—Ä–µ–¥ –≤—ã–¥–∞—á–µ–π —Å—Å—ã–ª–∫–∏)
@csrf_exempt
def validate_token(request):
    token = request.GET.get("token")

    if not token:
        return JsonResponse({"valid": False, "error": "No token provided"}, status=400)

    with connection.cursor() as cursor:
        cursor.execute("SELECT status FROM tutor_app_tutorinvitetoken WHERE token = %s", [token])
        row = cursor.fetchone()

    if row and row[0] == "unused":
        with connection.cursor() as cursor:
            cursor.execute("UPDATE tutor_app_tutorinvitetoken SET status = 'used' WHERE token = %s", [token])
        return JsonResponse({"valid": True})

    return JsonResponse({"valid": False, "error": "Invalid or used token"}, status=400)


# ‚úÖ API: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–±–æ—Ç –±—É–¥–µ—Ç –ø—Ä–æ–≤–µ—Ä—è—Ç—å –ø–æ Telegram ID)
@csrf_exempt
def check_user_registration(request):
    """ –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ Telegram ID """
    telegram_id = request.GET.get("user_id")

    if not telegram_id:
        return JsonResponse({"error": "User ID is required"}, status=400)

    is_registered = CustomUser.objects.filter(telegram_id=telegram_id).exists()
    return JsonResponse({"registered": is_registered})



# –ó–∞–ø–∏—Å—å –∫ —Ç—å—é—Ç–æ—Ä—É
@login_required
def send_tutor_request(request):
    if request.method == "POST":
        try:
            data = json.loads(request.body)
            tutor_profile_id = data.get("tutor_id")

            print("üì¶ tutor_id –∏–∑ POST:", tutor_profile_id)

            tutor_profile = get_object_or_404(TutorProfile, id=tutor_profile_id)
            tutor_user = tutor_profile.user
            student = request.user

            # üî• –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ TutorStudent, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
            relation, created = TutorStudent.objects.get_or_create(
                tutor=tutor_profile,
                student=student,
                defaults={"confirmed": False}
            )

            if not created:
                print("‚ö†Ô∏è –ó–∞–ø–∏—Å—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç:", relation)
                return JsonResponse({"status": "already_requested", "message": "–í—ã —É–∂–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –∑–∞–ø—Ä–æ—Å!"})

            # üîî –°–æ–∑–¥–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Ç—å—é—Ç–æ—Ä—É
            Notification.objects.create(
            user=tutor_user,
            message=f"üì© –ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –æ—Ç {student.first_name} {student.last_name} –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç ¬´{tutor_profile.subject}¬ª. "
                    f"<span data-student-id='{student.id}' data-student-name='{student.first_name} {student.last_name}' "
                    f"data-tutor-id='{tutor_profile.id}' class='inline-approve'>‚úÖ</span> "
                    f"<span data-student-id='{student.id}' data-student-name='{student.first_name} {student.last_name}' "
                    f"data-tutor-id='{tutor_profile.id}' class='inline-decline'>‚ùå</span>"
            )


            print("‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Ç—å—é—Ç–æ—Ä—É")
            return JsonResponse({"status": "ok", "message": "–ó–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —Ç—å—é—Ç–æ—Ä—É!"})

        except Exception as e:
            print("‚ùå –û—à–∏–±–∫–∞ –≤–Ω—É—Ç—Ä–∏ POST –æ–±—Ä–∞–±–æ—Ç–∫–∏:", str(e))
            return JsonResponse({"error": "–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞", "details": str(e)}, status=500)

    return JsonResponse({"error": "–ù–µ–≤–µ—Ä–Ω—ã–π –º–µ—Ç–æ–¥"}, status=405)




def confirm_tutor_request(request, token):
    try:
        invite = TutorInviteToken.objects.get(token=token)
        if invite.is_used:
            return redirect("/tutors?confirmed=already")

        tutor_user = CustomUser.objects.get(email=invite.email)
        tutor_profile = tutor_user.tutor_profile
        student_user = invite.student

        relation = TutorStudent.objects.get(tutor=tutor_profile, student=student_user)
        relation.confirmed = True
        relation.save()

        invite.is_used = True
        invite.save()

        return redirect(f"/tutors?confirmed=1&student_id={student_user.id}&first_name={student_user.first_name}&last_name={student_user.last_name}")

    except Exception as e:
        print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏:", e)
        return redirect("/tutors?confirmed=error")



@csrf_exempt
@login_required
def get_my_lessons(request):
    tutor_id = request.GET.get("tutor_id")
    if not tutor_id:
        return JsonResponse({"error": "Tutor ID is required"}, status=400)

    try:
        tutor_profile = TutorProfile.objects.get(user__id=tutor_id)
    except TutorProfile.DoesNotExist:
        return JsonResponse({"error": "Tutor not found"}, status=404)

    schedule = tutor_profile.schedule or {}
    current_time = pytz.timezone("Asia/Bishkek").localize(datetime(2025, 3, 31, 8, 30))
    show_fields = False

    for day, pair_ids in schedule.items():
        for pair_num in pair_ids:
            if pair_num not in lesson_times:
                continue
            start_str, _ = lesson_times[pair_num].split("-")
            start_hour, start_min = map(int, start_str.strip().split(":"))
            start_time = current_time.replace(hour=start_hour, minute=start_min, second=0, microsecond=0)
            if current_time < start_time + timedelta(hours=2):
                show_fields = True

    students = TutorStudent.objects.filter(tutor=tutor_profile, attended=True).select_related("student")
    lessons = []
    for s in students:
        student = s.student
        try:
            student_profile = TutorProfile.objects.get(user=student)
            group = student_profile.group or student.group or ""
        except TutorProfile.DoesNotExist:
            group = student.group or ""

        lessons.append({
            "first_name": student.first_name,
            "last_name": student.last_name,
            "group": group
        })

    return JsonResponse({
        "lessons": lessons,
        "show_fields": show_fields,
        "schedule": schedule,  # <--- üî• –≤–æ—Ç —ç—Ç—É —Å—Ç—Ä–æ–∫—É –¥–æ–±–∞–≤—å
        "topic": tutor_profile.last_lesson_topic or "",
        "location": tutor_profile.last_lesson_location or ""
    })




def send_acceptance_notification(request):
    if request.method == "POST":
        data = json.loads(request.body)
        student_id = data.get("student_id")
        tutor_name = data.get("tutor_name")
        subject = data.get("subject")
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç—É–¥–µ–Ω—Ç–∞
        student = CustomUser.objects.get(id=student_id)

        # –°–æ–∑–¥–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        notification_message = f"{tutor_name} –ø—Ä–∏–Ω—è–ª –≤–∞—à—É –∑–∞—è–≤–∫—É –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç {subject}."
        notification_time = datetime.now().strftime("%H:%M")

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        notification = Notification.objects.create(
            user=student,
            message=f"{notification_message} –í—Ä–µ–º—è: {notification_time}",
            timestamp=datetime.now()
        )

        return JsonResponse({"success": True, "message": "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!"})
    return JsonResponse({"error": "–ù–µ–≤–µ—Ä–Ω—ã–π –∑–∞–ø—Ä–æ—Å!"}, status=400)


@login_required(login_url='/login/')
def get_notifications(request):
    user = request.user
    notifications = Notification.objects.filter(user=user).order_by('-timestamp')  # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏

    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç, —É–¥–æ–±–Ω—ã–π –¥–ª—è —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞
    notifications_data = []
    for notification in notifications:
        notifications_data.append({
            "message": notification.message,
            "timestamp": notification.timestamp.isoformat(),
            "is_read": notification.is_read
        })
    
    return JsonResponse({"notifications": notifications_data})


@csrf_exempt
@login_required
def confirm_via_notification(request):
    data = json.loads(request.body)
    student_id = data.get("student_id")
    tutor_id = data.get("tutor_id")

    relation = TutorStudent.objects.get(tutor_id=tutor_id, student_id=student_id)
    relation.confirmed = True
    relation.save()

    student = relation.student
    tutor_profile = relation.tutor
    tutor_user = tutor_profile.user

    # ‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å—Ç—É–¥–µ–Ω—Ç—É
    Notification.objects.create(
        user_id=student.id,
        message=(
            f"üéâ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –∫ —Ç—å—é—Ç–æ—Ä—É {tutor_user.first_name} {tutor_user.last_name} "
            f"–ø–æ –ø—Ä–µ–¥–º–µ—Ç—É ¬´{tutor_profile.subject}¬ª –ø—Ä–∏–Ω—è—Ç–∞!"
        )
    )

    # ‚úÖ –ò—Å—Ç–æ—Ä–∏—è –¥–µ–π—Å—Ç–≤–∏—è –¥–ª—è —Ç—å—é—Ç–æ—Ä–∞
    Notification.objects.create(
        user=request.user,
        message=(
            f"‚úÖ –í—ã –ø—Ä–∏–Ω—è–ª–∏ –∑–∞—è–≤–∫—É –æ—Ç {student.first_name} {student.last_name} "
        )
    )

    # ‚ùå –£–¥–∞–ª—è–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
    Notification.objects.filter(
        user=request.user,
        message__icontains=f"–ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –æ—Ç {student.first_name} {student.last_name}"
    ).delete()

    return JsonResponse({"success": True})



@csrf_exempt
@login_required
def decline_tutor_request(request):
    data = json.loads(request.body)
    student_id = data.get("student_id")
    tutor_id = data.get("tutor_id")

    try:
        student = CustomUser.objects.get(id=student_id)
        tutor_profile = TutorProfile.objects.get(id=tutor_id)
        tutor_user = request.user

        # –£–¥–∞–ª—è–µ–º —Å–≤—è–∑—å
        TutorStudent.objects.filter(tutor_id=tutor_id, student_id=student_id).delete()

        # ‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å—Ç—É–¥–µ–Ω—Ç—É –æ–± –æ—Ç–∫–∞–∑–µ
        Notification.objects.create(
            user_id=student.id,
            message=(
                f"‚ùå –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –∫ —Ç—å—é—Ç–æ—Ä—É {tutor_user.first_name} {tutor_user.last_name} "
                f"–ø–æ –ø—Ä–µ–¥–º–µ—Ç—É ¬´{tutor_profile.subject}¬ª –±—ã–ª–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞."
            )
        )

        # ‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Ç—å—é—Ç–æ—Ä—É (–∏—Å—Ç–æ—Ä–∏—è –æ—Ç–∫–∞–∑–∞)
        Notification.objects.create(
            user=request.user,
            message=(
                f"‚ùå –í—ã –æ—Ç–∫–ª–æ–Ω–∏–ª–∏ –∑–∞—è–≤–∫—É –æ—Ç {student.first_name} {student.last_name} "
            )
        )

        # ‚ùå –£–¥–∞–ª—è–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
        Notification.objects.filter(
            user=request.user,
            message__icontains=f"–ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –æ—Ç {student.first_name} {student.last_name}"
        ).delete()

        return JsonResponse({"success": True})

    except Exception as e:
        return JsonResponse({"success": False, "error": str(e)}, status=500)
    




@csrf_exempt
@login_required
def get_tutor_schedule_with_attendance(request):
    try:
        user = request.user
        tutor_students = TutorStudent.objects.filter(student=user, confirmed=True).select_related("tutor", "tutor__user")

        if not tutor_students.exists():
            return JsonResponse({"error": "–£ –≤–∞—Å –Ω–µ—Ç –Ω–∏ –æ–¥–Ω–æ–≥–æ —Ç—å—é—Ç–æ—Ä–∞"}, status=403)

        result = []
        # current_time = datetime.now(pytz.timezone("Asia/Bishkek"))  # –≤ –ø—Ä–æ–¥–µ
        current_time = pytz.timezone("Asia/Bishkek").localize(datetime(2025, 3, 31, 8, 30))
        current_day = current_time.strftime("%A")  # English: Monday, etc.
        print(current_time)
        print(current_day)
        # –ö–∞—Ä—Ç–∞ –ø–µ—Ä–µ–≤–æ–¥–∞ –Ω–∞ —Ä—É—Å—Å–∫–∏–π
        day_map = {
            "Monday": "–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫",
            "Tuesday": "–í—Ç–æ—Ä–Ω–∏–∫",
            "Wednesday": "–°—Ä–µ–¥–∞",
            "Thursday": "–ß–µ—Ç–≤–µ—Ä–≥",
            "Friday": "–ü—è—Ç–Ω–∏—Ü–∞",
            "Saturday": "–°—É–±–±–æ—Ç–∞",
            "Sunday": "–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ"
        }
        current_day_rus = day_map.get(current_day)

        for relation in tutor_students:
            tutor = relation.tutor
            schedule = tutor.schedule or {}

            formatted_schedule = []

            for day, pair_ids in schedule.items():
                for pair_num in pair_ids:
                    if pair_num not in lesson_times:
                        continue

                    time_range = lesson_times[pair_num]
                    start_str, _ = time_range.split("-")
                    start_hour, start_min = map(int, start_str.strip().split(":"))
                    start_time = current_time.replace(hour=start_hour, minute=start_min, second=0, microsecond=0)

                    # ‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ—Ç–º–µ—Ç–∫—É
                    allowed_to_mark = (
                        day.lower() == current_day_rus.lower() and
                        current_time >= start_time and
                        current_time <= (start_time + timedelta(hours=2))
                    )

                    # ‚úÖ –ê–≤—Ç–æ—ç–∫—Å–ø–æ—Ä—Ç Excel, –µ—Å–ª–∏ –ø—Ä–æ—à–ª–æ 2 —á–∞—Å–∞ —Å –Ω–∞—á–∞–ª–∞ –ø–∞—Ä—ã
                    if not tutor.excel_generated and current_time > start_time + timedelta(hours=2):
                        generate_excel_for_lesson(tutor)
                        tutor.excel_generated = True
                        tutor.save()
                        print(f"üíæ Excel —Å–æ–∑–¥–∞–Ω –¥–ª—è —Ç—å—é—Ç–æ—Ä–∞ {tutor.user.get_full_name()}")

                    formatted_schedule.append({
                        "day": day,
                        "time": time_range,
                        "can_mark": allowed_to_mark
                    })

            result.append({
                "tutor_id": tutor.id,
                "tutor_name": f"{tutor.user.first_name} {tutor.user.last_name}",
                "subject": tutor.subject,
                "schedule": formatted_schedule,
                "already_marked": relation.attended
            })

        return JsonResponse({"schedule": result})

    except Exception as e:
        print("üî• –û—à–∏–±–∫–∞ –≤ get_schedule_with_attendance:", e)
        import traceback
        traceback.print_exc()
        return JsonResponse({"error": "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞"}, status=500)





@csrf_exempt
@login_required
def submit_attendance(request):
    data = json.loads(request.body)
    tutor_id = data.get("tutor_id")
    user = request.user

    try:
        relation = TutorStudent.objects.get(tutor_id=tutor_id, student=user, confirmed=True)
        tutor = relation.tutor
        schedule = tutor.schedule or {}

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Ç–µ—Å—Ç–æ–≤–æ–µ –≤—Ä–µ–º—è (–∏–ª–∏ datetime.now(...) –≤ –ø—Ä–æ–¥–µ)
        current_time = pytz.timezone("Asia/Bishkek").localize(datetime(2025, 3, 31, 8, 30))
        current_day = current_time.strftime("%A")  # "Monday"

        # –ü–µ—Ä–µ–≤–æ–¥–∏–º –≤ —Ä—É—Å—Å–∫–∏–π, –∫–∞–∫ –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏
        day_map = {
            "Monday": "–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫",
            "Tuesday": "–í—Ç–æ—Ä–Ω–∏–∫",
            "Wednesday": "–°—Ä–µ–¥–∞",
            "Thursday": "–ß–µ—Ç–≤–µ—Ä–≥",
            "Friday": "–ü—è—Ç–Ω–∏—Ü–∞",
            "Saturday": "–°—É–±–±–æ—Ç–∞",
            "Sunday": "–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ"
        }
        current_day_rus = day_map.get(current_day)

        lesson_times = {
            "1": "08:00-09:20",
            "2": "09:30-10:50",
            "3": "11:40-13:00",
            "4": "13:10-14:30",
            "5": "14:40-16:00",
            "6": "16:00-17:20",
            "7": "17:30-19:00"
        }

        allowed = False

        if current_day_rus in schedule:
            for pair_id in schedule[current_day_rus]:
                if pair_id not in lesson_times:
                    continue
                start_str, _ = lesson_times[pair_id].split("-")
                start_hour, start_min = map(int, start_str.strip().split(":"))
                start_time = current_time.replace(hour=start_hour, minute=start_min, second=0, microsecond=0)
                if current_time >= start_time and current_time <= (start_time + timedelta(hours=2)):
                    allowed = True
                    break

        if not allowed:
            return JsonResponse({"error": "–í—Ä–µ–º—è –æ—Ç–º–µ—Ç–∫–∏ –≤—ã—à–ª–æ"}, status=403)

        # ‚úÖ –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–∫—Ç –æ—Ç–º–µ—Ç–∫–∏
        relation.attended = True
        relation.attendance_time = current_time
        relation.save()

        return JsonResponse({"success": True, "message": "–ü–æ—Å–µ—â–µ–Ω–∏–µ –æ—Ç–º–µ—á–µ–Ω–æ!"})
    
    except TutorStudent.DoesNotExist:
        return JsonResponse({"error": "–ó–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"}, status=404)




@csrf_exempt
@login_required
def save_lesson_details(request):
    data = json.loads(request.body)
    tutor_id = data.get("tutor_id")
    topic = data.get("topic")
    location = data.get("location")

    if not tutor_id or not topic or not location:
        return JsonResponse({"error": "–í—Å–µ –ø–æ–ª—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã"}, status=400)

    try:
        tutor_profile = TutorProfile.objects.get(user_id=tutor_id)
        tutor_profile.last_lesson_topic = topic
        tutor_profile.last_lesson_location = location
        tutor_profile.save()
        return JsonResponse({"success": True})
    except TutorProfile.DoesNotExist:
        return JsonResponse({"error": "–¢—å—é—Ç–æ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω"}, status=404)
    

def generate_excel_for_lesson(tutor: TutorProfile):
    students = TutorStudent.objects.filter(tutor=tutor, attended=True).select_related("student")

    wb = openpyxl.Workbook()
    ws = wb.active
    ws.title = "–£—Ä–æ–∫"

    # –®–∞–ø–∫–∞
    ws["A1"] = f"–¢–µ–º–∞: {tutor.last_lesson_topic or '–Ω–µ —É–∫–∞–∑–∞–Ω–∞'}"
    ws["A2"] = f"–ú–µ—Å—Ç–æ: {tutor.last_lesson_location or '–Ω–µ —É–∫–∞–∑–∞–Ω–æ'}"
    ws["A3"] = f"–î–∞—Ç–∞: {datetime.now().strftime('%d.%m.%Y %H:%M')}"
    ws.append([])

    # –ó–∞–≥–æ–ª–æ–≤–∫–∏ —Ç–∞–±–ª–∏—Ü—ã
    ws.append(["–§–∞–º–∏–ª–∏—è", "–ò–º—è", "–ì—Ä—É–ø–ø–∞"])
    for col in ws[5]:
        col.font = Font(bold=True)

    # –°–ø–∏—Å–æ–∫ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤
    for s in students:
        student = s.student
        try:
            profile = TutorProfile.objects.get(user=student)
            group = profile.group or student.group or ""
        except TutorProfile.DoesNotExist:
            group = student.group or ""
        ws.append([student.last_name, student.first_name, group])

    # –ü—É—Ç—å –¥–æ media/lessons/
    folder_path = os.path.join(settings.MEDIA_ROOT, "lessons")
    os.makedirs(folder_path, exist_ok=True)

    file_name = f"lesson_{tutor.user.id}_{datetime.now().strftime('%Y%m%d_%H%M%S')}.xlsx"
    file_path = os.path.join(folder_path, file_name)

    wb.save(file_path)

    print(f"‚úÖ –£—Ä–æ–∫ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω –≤ Excel: {file_name}")
    return file_name