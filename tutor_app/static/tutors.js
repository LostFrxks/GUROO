// –§—É—Ç–µ—Ä —à–∞—Ä–∏–∫–∏
document.addEventListener('DOMContentLoaded', () => {
    const footerAnimation = document.getElementById('footer-animation');
    const maxCircles = 50; // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∞–ª–µ–Ω—å–∫–∏—Ö –∫—Ä—É–≥–æ–≤
    let bigCircle = null; // –û–¥–∏–Ω –±–æ–ª—å—à–æ–π –∫—Ä—É–≥

    function createCircle() {
        if (document.querySelectorAll('.circle').length >= maxCircles) return;

        const circle = document.createElement('div');
        const size = Math.random() * 80 + 20; // –†–∞–∑–º–µ—Ä –æ—Ç 20 –¥–æ 100px
        const speed = Math.random() * 15 + 10; // –°–∫–æ—Ä–æ—Å—Ç—å (–æ—Ç 10 –¥–æ 25 —Å–µ–∫—É–Ω–¥)
        const directionX = Math.random() < 0.5 ? -1 : 1; // –î–≤–∏–∂–µ–Ω–∏–µ –≤–ª–µ–≤–æ/–≤–ø—Ä–∞–≤–æ
        const directionY = Math.random() < 0.5 ? -1 : 1; // –î–≤–∏–∂–µ–Ω–∏–µ –≤–≤–µ—Ä—Ö/–≤–Ω–∏–∑

        let startX, startY, moveX, moveY;
        const side = Math.floor(Math.random() * 4);

        switch (side) {
            case 0:
                startX = Math.random() * 100;
                startY = -10;
                moveX = directionX * (Math.random() * 50);
                moveY = 120;
                break;
            case 1:
                startX = Math.random() * 100;
                startY = 110;
                moveX = directionX * (Math.random() * 50);
                moveY = -120;
                break;
            case 2:
                startX = -10;
                startY = Math.random() * 100;
                moveX = 120;
                moveY = directionY * (Math.random() * 50);
                break;
            case 3:
                startX = 110;
                startY = Math.random() * 100;
                moveX = -120;
                moveY = directionY * (Math.random() * 50);
                break;
        }
        circle.classList.add('circle');
        circle.style.width = `${size}px`;
        circle.style.height = `${size}px`;
        circle.style.left = `${startX}vw`;
        circle.style.top = `${startY}vh`;
        circle.style.setProperty('--move-x', `${moveX}vw`);
        circle.style.setProperty('--move-y', `${moveY}vh`);
        circle.style.animation = `moveCircle ${speed}s linear infinite alternate`;

        footerAnimation.appendChild(circle);

        setTimeout(() => {
            circle.remove();
        }, speed * 1000);
    }

    function createBigCircle() {
        if (bigCircle) bigCircle.remove();

        bigCircle = document.createElement('div');
        bigCircle.classList.add('big-circle');

        const size = Math.random() * 200 + 200;
        bigCircle.style.width = `${size}px`;
        bigCircle.style.height = `${size}px`;

        let startX, startY, moveX, moveY;
        const side = Math.floor(Math.random() * 4);

        switch (side) {
            case 0:
                startX = Math.random() * 100;
                startY = -20;
                moveX = (Math.random() - 0.5) * 50;
                moveY = 130;
                break;
            case 1:
                startX = Math.random() * 100;
                startY = 120;
                moveX = (Math.random() - 0.5) * 50;
                moveY = -130;
                break;
            case 2:
                startX = -20;
                startY = Math.random() * 100;
                moveX = 130;
                moveY = (Math.random() - 0.5) * 50;
                break;
            case 3:
                startX = 120;
                startY = Math.random() * 100;
                moveX = -130;
                moveY = (Math.random() - 0.5) * 50;
                break;
        }

        bigCircle.style.left = `${startX}vw`;
        bigCircle.style.top = `${startY}vh`;
        bigCircle.style.animation = `moveBigCircle 25s linear infinite alternate`;

        footerAnimation.appendChild(bigCircle);

        setTimeout(createBigCircle, 25000);
    }

    createBigCircle();
    setInterval(createCircle, 400);
});

// document.addEventListener("DOMContentLoaded", function () {
//     console.log("‚úÖ –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é...");

//     let userIdElement = document.querySelector("#user-id");
//     let userId = userIdElement ? userIdElement.textContent.trim() : null;
//     console.log("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ userId:", userId);

//     if (!userId || isNaN(userId)) {
//         console.error("‚ùå –û—à–∏–±–∫–∞: –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π userId!", userId);
//         return;
//     }

//     function getCSRFToken() {
//         return document.cookie.split("; ")
//             .find(row => row.startsWith("csrftoken="))
//             ?.split("=")[1];
//     }

//     function loadTutors() {
//         fetch(`/api/get_tutors/?user_id=${userId}`)
//             .then(response => response.json())
//             .then(tutors => {
//                 const container = document.querySelector(".blocks");
//                 container.innerHTML = "";

//                 tutors.forEach(tutor => {
//                     const block = document.createElement("div");
//                     block.classList.add("block");

//                     let scheduleContent = "";
//                     if (tutor.schedule && Object.keys(tutor.schedule).length > 0) {
//                         // ‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫ –¥–Ω–µ–π –Ω–µ–¥–µ–ª–∏
//                         const daysOrder = ["–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", "–í—Ç–æ—Ä–Ω–∏–∫", "–°—Ä–µ–¥–∞", "–ß–µ—Ç–≤–µ—Ä–≥", "–ü—è—Ç–Ω–∏—Ü–∞", "–°—É–±–±–æ—Ç–∞", "–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ"];

//                         const lessonTimes = {
//                             "1": "8:00 - 9:20",
//                             "2": "9:30 - 10:50",
//                             "3": "11:40 - 13:00",
//                             "4": "13:10 - 14:30",
//                             "5": "14:40 - 16:00",
//                             "6": "16:10 - 17:30",
//                             "7": "17:40 - 19:00"
//                         };

//                         let scheduleArray = [];
//                         Object.entries(tutor.schedule).forEach(([day, times]) => {
//                             if (!Array.isArray(times)) {
//                                 times = [times];
//                             }
//                             times.forEach(time => {
//                                 scheduleArray.push({ 
//                                     day, 
//                                     time: parseInt(time), 
//                                     timeFormatted: lessonTimes[time] || `–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –≤—Ä–µ–º—è (${time})` // –î–æ–±–∞–≤–ª—è–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è
//                                 });
//                             });
//                         });

//                         // ‚úÖ –°–æ—Ä—Ç–∏—Ä—É–µ–º —Å–Ω–∞—á–∞–ª–∞ –ø–æ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏, –ø–æ—Ç–æ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏
//                         scheduleArray.sort((a, b) => {
//                             let dayA = daysOrder.indexOf(a.day);
//                             let dayB = daysOrder.indexOf(b.day);
//                             if (dayA === dayB) {
//                                 return a.time - b.time; // –ï—Å–ª–∏ –¥–Ω–∏ –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ ‚Äî —Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏
//                             }
//                             return dayA - dayB; // –ò–Ω–∞—á–µ —Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏
//                         });

//                         // ‚úÖ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫–∏ —Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º
//                         scheduleContent = scheduleArray.map(entry => 
//                             `<li>${entry.day}: ${entry.timeFormatted}</li>`
//                         ).join("");
//                     } else {
//                         scheduleContent = "<li>–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤</li>";
//                     }


//                     let actionContent = "";
//                     if (tutor.is_registered) {
//                         if (tutor.attended) {
//                             actionContent = `<p class="attended-text">‚úÖ –í—ã —É–∂–µ –æ—Ç–º–µ—Ç–∏–ª–∏—Å—å</p>`;
//                         } else {
//                             actionContent = `<button class="btn-attendance" data-id="${tutor.id}">–Ø –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é</button>`;
//                         }
//                     } else if (tutor.is_pending) {
//                         actionContent = `<p class="pending-text">‚è≥ –û–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è</p>`;
//                     } else {
//                         actionContent = `<button class="btn-view" data-id="${tutor.id}">–û–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è</button>`;
//                     }
                    
//                     block.innerHTML = `
//                         <div class="profile_photo">
//                             <img src="/media/${tutor.photo.replace('/media/', '')}" alt="–§–æ—Ç–æ —Ç—å—é—Ç–æ—Ä–∞">
//                         </div>
//                         <div class="content">
//                             <h3>${tutor.name}</h3>
//                             <span class="grade">${tutor.subject}</span>
//                             <p><strong>üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ:</strong></p>
//                             <ul>${scheduleContent}</ul>
//                             <div class="action">${actionContent}</div>
//                         </div>
//                     `;
//                     container.appendChild(block);
//                 });
//                 document.querySelectorAll("span.grade").forEach(gradeElement => {
//                     gradeElement.innerHTML = gradeElement.innerHTML
//                         .replace(/\s*\(/, "<br>(")
//                         .replace(/\s+/g, " ")
//                         .trim();
//                 });
//             })
//             .catch(error => console.error("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç—å—é—Ç–æ—Ä–æ–≤:", error));
//     }

//     document.addEventListener("click", function (event) {
//         if (event.target.classList.contains("btn-register")) {
//             let tutorId = event.target.getAttribute("data-id");
//             console.log("üì© –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –∑–∞–ø–∏—Å—å –∫ —Ç—å—é—Ç–æ—Ä—É...", { tutorId, userId });

//             fetch(`/api/register_tutor/${tutorId}/${userId}/`, {
//                 method: "POST",
//                 headers: {
//                     "Content-Type": "application/json",
//                     "X-CSRFToken": getCSRFToken()
//                 }
//             })
//                 .then(response => response.json())
//                 .then(data => {
//                     console.log("‚úÖ –û—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞:", data);
//                     if (data.success) {
//                         event.target.parentElement.innerHTML = `<p class="pending-text">‚è≥ –û–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è</p>`;
//                     }
//                 })
//                 .catch(error => console.error("‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏:", error));
//         }

//         if (event.target.classList.contains("btn-attendance")) {
//             let tutorId = event.target.getAttribute("data-id");
//             console.log("üìå –û—Ç–º–µ—á–∞–µ–º –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–∏–µ", { tutorId, userId });

//             fetch(`/api/mark_attendance/${tutorId}/`, {
//                 method: "POST",
//                 headers: {
//                     "Content-Type": "application/json",
//                     "X-CSRFToken": getCSRFToken()
//                 }
//             })
//                 .then(response => response.json())
//                 .then(data => {
//                     if (data.success) {
//                         event.target.parentElement.innerHTML = `<p class="attended-text">‚úÖ –í—ã —É–∂–µ –æ—Ç–º–µ—Ç–∏–ª–∏—Å—å</p>`;
//                     }
//                 })
//                 .catch(error => console.error("‚ùå –û—à–∏–±–∫–∞ –ø–æ—Å–µ—â–µ–Ω–∏—è:", error));
//         }
//     });
    
//     loadTutors();
//     console.log("‚úÖ –ì–æ—Ç–æ–≤–æ!");
// });
document.addEventListener("DOMContentLoaded", function () {
    const searchInput = document.querySelector(".main1-search-input");
    let timeout = null;

    searchInput.addEventListener("input", function () {
        clearTimeout(timeout);
        timeout = setTimeout(() => {
            const searchText = searchInput.value.toLowerCase().trim();
            const tutorBlocks = document.querySelectorAll(".block");

            tutorBlocks.forEach(block => {
                const tutorName = block.querySelector("h3").textContent.toLowerCase().trim();
                if (tutorName.includes(searchText)) {
                    if (block.style.display === "none") {
                        block.style.display = "flex"; // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –±–ª–æ–∫–∏
                    }
                    block.classList.remove("fade-out");
                    block.classList.add("fade-in");
                } else {
                    block.classList.remove("fade-in");
                    block.classList.add("fade-out");
                    setTimeout(() => {
                        if (!tutorName.includes(searchText)) {
                            block.style.display = "none"; // –°–∫—Ä–æ–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –∞–Ω–∏–º–∞—Ü–∏–∏
                        }
                    }, 400);
                }
            });
        }, 100);
    });
});


const requestedTutors = new Set();

document.addEventListener("DOMContentLoaded", function () {

    console.log("‚úÖ –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é...");

    let userIdElement = document.querySelector("#user-id");
    let userId = userIdElement ? userIdElement.textContent.trim() : null;
    console.log("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ userId:", userId);

    if (!userId || isNaN(userId)) {
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º popup
        document.getElementById("login-required-popup").classList.add("visible");
        document.getElementById("login-required-overlay").classList.add("visible");
        document.body.style.overflow = "hidden";
        return;
    }
    function getCSRFToken() {
        return document.cookie.split("; ")
            .find(row => row.startsWith("csrftoken="))
            ?.split("=")[1];
    }
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç—å—é—Ç–æ—Ä–æ–≤
    function loadTutors() {
        fetch(`/get_tutors/?user_id=${userId}`)
            .then(response => response.json())
            .then(tutors => {
                const container = document.querySelector(".blocks");
                container.innerHTML = "";  // –û—á–∏—â–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –ø–µ—Ä–µ–¥ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º –Ω–æ–≤—ã—Ö —Ç—å—é—Ç–æ—Ä–æ–≤

                tutors.forEach((tutor, index) => {
                    const block = document.createElement("div");
                    block.classList.add("block");
                    block.setAttribute("data-course", tutor.course || "–ù–µ —É–∫–∞–∑–∞–Ω");
                    block.setAttribute("data-subject", tutor.subject || "–ù–µ —É–∫–∞–∑–∞–Ω");

                    console.log(`–°–æ–∑–¥–∞—ë–º –±–ª–æ–∫ –¥–ª—è —Ç—å—é—Ç–æ—Ä–∞: ${tutor.name} | –ö—É—Ä—Å: ${tutor.course} | –ü—Ä–µ–¥–º–µ—Ç: ${tutor.subject}`);

                    let scheduleContent = "";
                    if (tutor.schedule && Object.keys(tutor.schedule).length > 0) {
                        const daysOrder = ["–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", "–í—Ç–æ—Ä–Ω–∏–∫", "–°—Ä–µ–¥–∞", "–ß–µ—Ç–≤–µ—Ä–≥", "–ü—è—Ç–Ω–∏—Ü–∞", "–°—É–±–±–æ—Ç–∞", "–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ"];
                        const lessonTimes = {
                            "1": "8:00 - 9:20",
                            "2": "9:30 - 10:50",
                            "3": "11:40 - 13:00",
                            "4": "13:10 - 14:30",
                            "5": "14:40 - 16:00",
                            "6": "16:10 - 17:30",
                            "7": "17:40 - 19:00"
                        };

                        let scheduleArray = [];
                        Object.entries(tutor.schedule).forEach(([day, times]) => {
                            if (!Array.isArray(times)) {
                                times = [times];
                            }
                            times.forEach(time => {
                                scheduleArray.push({
                                    day,
                                    time: parseInt(time),
                                    timeFormatted: lessonTimes[time] || `–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –≤—Ä–µ–º—è (${time})`
                                });
                            });
                        });

                        scheduleArray.sort((a, b) => {
                            let dayA = daysOrder.indexOf(a.day);
                            let dayB = daysOrder.indexOf(b.day);
                            return dayA === dayB ? a.time - b.time : dayA - dayB;
                        });

                        scheduleContent = scheduleArray.map(entry =>
                            `<li>${entry.day}: ${entry.timeFormatted}</li>`
                        ).join("");
                    } else {
                        scheduleContent = "<li>–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤</li>";
                    }

                    const gradientClass = index % 2 === 0 ? 'gradient-normal' : 'gradient-reverse';
                    let actionContent = "";
                    actionContent = `<button class="btn-view" data-id="${tutor.id}">–û–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è</button>`;
                    // <div class="profile_photo">
                    //     <img src="/media/${tutor.photo.replace('/media/', '')}" alt="–§–æ—Ç–æ —Ç—å—é—Ç–æ—Ä–∞">
                    // </div>
                    block.innerHTML = `
                        <div class="gradient-header ${gradientClass}">
                            <img src="/media/${tutor.photo.replace('/media/', '')}" alt="–§–æ—Ç–æ —Ç—å—é—Ç–æ—Ä–∞">
                        </div>
                        <div class="content">
                            <h3>${tutor.name}</h3>
                            <span class="grade">${tutor.subject}</span>
                            <p><strong>üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ:</strong></p>
                            <ul>${scheduleContent}</ul>
                            <div class="action">${actionContent}</div>
                        </div>
                    `;
                    container.appendChild(block);

                    block.querySelector(".btn-view")?.addEventListener("click", function () {
                        openTutorPopup(tutor);
                    });
                });
                document.querySelectorAll("span.grade").forEach(gradeElement => {
                    gradeElement.innerHTML = gradeElement.innerHTML
                        .replace(/\s*\(/, "<br>(")
                        .replace(/\s+/g, " ")
                        .trim();
                });
            })
            .catch(error => console.error("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç—å—é—Ç–æ—Ä–æ–≤:", error));
    }

    function openTutorPopup(tutor) {
        const stored = JSON.parse(localStorage.getItem("requestedTutors")) || {};
        const requestTime = stored[tutor.id];
        const isRecentlyRequested = requestTime && (Date.now() - requestTime < 60 * 60 * 1000);

        const popup = document.getElementById("tutor-popup");
        const overlay = document.getElementById("tutor-popup-overlay");
    
        document.getElementById("popup1-photo").src = `/media/${tutor.photo.replace('/media/', '')}`;
        document.getElementById("popup1-name").textContent = tutor.name;
        document.getElementById("popup1-course").textContent = tutor.own_course || "—Å–∏–≥–º–∞";
        document.getElementById("popup1-group").textContent = (tutor.group && tutor.group.trim()) ? tutor.group : "–ù–µ —É–∫–∞–∑–∞–Ω–æ";
        document.getElementById("popup1-phone").textContent = tutor.phone || "‚Äî";
        document.getElementById("popup1-telegram-link").href = tutor.telegram || "#";
        document.getElementById("popup1-bio-text").textContent = tutor.bio || "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç";
        document.getElementById("popup1-course-work").textContent = tutor.course || "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç";
        document.getElementById("popup1-subject").textContent = tutor.subject || "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç";
        console.log("üì¶ –ì—Ä—É–ø–ø–∞ —Ç—å—é—Ç–æ—Ä–∞:", tutor.group);
        const scheduleEl = document.getElementById("popup1-schedule");
        scheduleEl.innerHTML = "";
        const registerBtn = document.getElementById("popup1-register");
        registerBtn.setAttribute("data-tutor-id", tutor.id);

        const requestedTutors = JSON.parse(localStorage.getItem("requestedTutors")) || [];

        if (parseInt(userId) === tutor.user_id) {
            registerBtn.textContent = "‚ùå –≠—Ç–æ –≤—ã";
            registerBtn.disabled = true;
            registerBtn.classList.add("disabled");
            registerBtn.style.cursor = "not-allowed";
        }
        else if (tutor.request_status === "pending" || isRecentlyRequested) {
            registerBtn.textContent = "‚è≥ –ó–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω...";
            registerBtn.disabled = true;
            registerBtn.classList.add("disabled");
            registerBtn.style.cursor = "not-allowed";
        }
        else if (tutor.request_status === "confirmed") {
            registerBtn.textContent = "‚úÖ –í—ã —É–∂–µ –∑–∞–ø–∏—Å–∞–Ω—ã";
            registerBtn.disabled = true;
            registerBtn.classList.add("disabled");
            registerBtn.style.cursor = "not-allowed";
        }
        else {
            registerBtn.textContent = "–ó–∞–ø–∏—Å–∞—Ç—å—Å—è";
            registerBtn.disabled = false;
            registerBtn.classList.remove("disabled");
            registerBtn.style.cursor = "pointer";
        }


        if (tutor.schedule && Object.keys(tutor.schedule).length > 0) {
            const daysOrder = ["–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", "–í—Ç–æ—Ä–Ω–∏–∫", "–°—Ä–µ–¥–∞", "–ß–µ—Ç–≤–µ—Ä–≥", "–ü—è—Ç–Ω–∏—Ü–∞", "–°—É–±–±–æ—Ç–∞", "–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ"];
            const lessonTimes = {
                "1": "8:00 - 9:20", "2": "9:30 - 10:50", "3": "11:40 - 13:00",
                "4": "13:10 - 14:30", "5": "14:40 - 16:00", "6": "16:10 - 17:30",
                "7": "17:40 - 19:00"
            };
    
            let scheduleArray = [];
            Object.entries(tutor.schedule).forEach(([day, times]) => {
                (Array.isArray(times) ? times : [times]).forEach(time => {
                    scheduleArray.push({
                        day,
                        time: parseInt(time),
                        timeFormatted: lessonTimes[time] || time
                    });
                });
            });
    
            scheduleArray.sort((a, b) => {
                const dayA = daysOrder.indexOf(a.day);
                const dayB = daysOrder.indexOf(b.day);
                return dayA === dayB ? a.time - b.time : dayA - dayB;
            });
    
            scheduleArray.forEach(entry => {
                const li = document.createElement("li");
                li.textContent = `${entry.day}: ${entry.timeFormatted}`;
                scheduleEl.appendChild(li);
            });
        } else {
            scheduleEl.innerHTML = "<li>–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤</li>";
        }
    
        popup.classList.remove("hidden");
        overlay.classList.remove("hidden");
        popup.classList.add("visible");
        overlay.classList.add("visible");
        document.body.style.overflow = "hidden";
    }
    
    function closeTutorPopup() {
        const popup = document.getElementById("tutor-popup");
        const overlay = document.getElementById("tutor-popup-overlay");
    
        popup.classList.remove("visible");
        overlay.classList.remove("visible");
    
        popup.classList.add("hidden");
        overlay.classList.add("hidden");
    
        document.body.style.overflow = "";
    }
    
    document.addEventListener("click", function (event) {
        if (event.target.classList.contains("popup1-close") || event.target.id === "tutor-popup-overlay") {
            closeTutorPopup();
        }
    });

    const filterButton = document.querySelector(".main1-filter-button");
    const filterContainer = document.querySelector(".filter-container");
    const courseButtons = document.querySelectorAll(".course-btn");
    const subjectsList = document.getElementById("subjects-list");

    const subjectsByCourse = {
        "1": [
            "–ö—ã—Ä–≥—ã–∑—Å–∫–∞—è –ª–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞ (–®–∞–º–±–∞–µ–≤–∞ –ë.)",
            "–ö—ã—Ä–≥—ã–∑—Å–∫–∞—è –ª–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞ (–ö–∞—Ä–∞–±–∞–µ–≤ –î.)",
            "–ö—ã—Ä–≥—ã–∑—Å–∫–∞—è –ª–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞ (–ú–∞–º—ã—Ä–±–∞–µ–≤–∞ –ù.)",
            "Civics (Grace Horman)",
            "General English (–ì—Ä–∏–≥–≥—Å –°–∞–º—É—ç–ª—å)",
            "Intro to Computers (Asem Begmanova)",
            "–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞ (–ê–º—Ä–∞–∫—É–ª–æ–≤ –ú.)",
            "–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞ (–ë–µ–ª—è–µ–≤–∞ –û.)",
            "–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞ (–Ø–∫–∏–º–∞–Ω—Å–∫–∞—è –¢.)",
            "–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞ (–†–∞—Ö–º–∞–Ω–æ–≤–∞ –ê.)",
            "–ê—Å—Ç—Ä–æ–Ω–æ–º–∏—è (–ö–æ–π—á—É–º–∞–Ω–æ–≤–∞ –ê.)",
            "–ë–∏–æ–ª–æ–≥–∏—è (–≠—Å–µ–Ω–∞–ª–∏–µ–≤ –ê.)",
            "–í—Å–µ–º–∏—Ä–Ω–∞—è –∏—Å—Ç–æ—Ä–∏—è –∏—Å–∫—É—Å—Å—Ç–≤–∞ (–í–æ—Ä–æ–Ω–∏–Ω–∞ –ï.)",
            "–í—Å–µ–æ–±—â–∞—è –∏—Å—Ç–æ—Ä–∏—è (–ö–∞–π–Ω–∞–∑–∞—Ä–æ–≤–∞ –ú.)",
            "–í—Å–µ–æ–±—â–∞—è –∏—Å—Ç–æ—Ä–∏—è (–°—É–ª—å–µ –ù.)",
            "–ì–µ–æ–≥—Ä–∞—Ñ–∏—è (–î–∂—É—Å—É–ø–æ–≤–∞ –ß.)",
            "–ì–µ–æ–≥—Ä–∞—Ñ–∏—è (–ö–µ–ª–≥–µ–Ω–±–∞–µ–≤–∞ –ö.)",
            "–ò–Ω–æ—Å—Ç—Ä–∞–Ω–Ω—ã–π —è–∑—ã–∫ (Bethan Holland)",
            "–ò–Ω–æ—Å—Ç—Ä–∞–Ω–Ω—ã–π —è–∑—ã–∫ (–ê—Ö—É–Ω–¥–∂–∞–Ω–æ–≤–∞ –°.)",
            "–ò–Ω–æ—Å—Ç—Ä–∞–Ω–Ω—ã–π —è–∑—ã–∫ (–†–∏—á–∞—Ä–¥ –•–æ–∫—Å)",
            "–ò–Ω–æ—Å—Ç—Ä–∞–Ω–Ω—ã–π —è–∑—ã–∫ (–¶—É–∫–∞–Ω–æ–≤–∞ –ù.)",
            "–ò–Ω–æ—Å—Ç—Ä–∞–Ω–Ω—ã–π —è–∑—ã–∫ (–≠—Å—Å–µ–Ω—Å –¢—à—É–º–∞)",
            "–ò–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞ (–°–∞—Ä—ã–±–∞–µ–≤–∞ –ê.)",
            "–ò–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞ (–¢—É–ª—å—Ç–µ–º–∏—Ä–æ–≤–∞ –ì.)",
            "–ò—Å—Ç–æ—Ä–∏—è –ö—ã—Ä–≥—ã–∑—Å—Ç–∞–Ω–∞ (–ö–∞–π–Ω–∞–∑–∞—Ä–æ–≤–∞ –ú.)",
            "–ö—ã—Ä–≥—ã–∑—Å–∫–∏–π —è–∑—ã–∫ (–ö–∞—Ä–∞–±–∞–µ–≤ –î.)",
            "–ö—ã—Ä–≥—ã–∑—Å–∫–∏–π —è–∑—ã–∫ (–ú–∞–º—ã—Ä–±–∞–µ–≤–∞ –ù.)",
            "–ö—ã—Ä–≥—ã–∑—Å–∫–∏–π —è–∑—ã–∫ (–®–∞–º–±–∞–µ–≤–∞ –ë.)",
            "–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞ (–Ø–∫–∏–º–∞–Ω—Å–∫–∞—è –¢.)",
            "–ù–∞—á–∞–ª—å–Ω–∞—è –≤–æ–µ–Ω–Ω–∞—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ (–ê–ª–∏–µ–≤ –ê.)",
            "–û—Å–Ω–æ–≤—ã –∫—Ä–µ–∞—Ç–∏–≤–Ω–æ–≥–æ –∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–≥–æ –º—ã—à–ª–µ–Ω–∏—è (–®–∞–±–∞–ª–∏–Ω–∞ –ê.)",
            "–†—É—Å—Å–∫–∞—è –ª–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞ (–í–æ—Ä–æ–Ω–∏–Ω–∞ –ï.)",
            "–†—É—Å—Å–∫–∏–π —è–∑—ã–∫ (–õ–æ–≥–≤–∏–Ω–µ–Ω–∫–æ –í.)",
            "–§–∏–∑–∏–∫–∞ (–ë–µ—Å—Å–æ–Ω–æ–≤ –§.)",
            "–§–∏–∑–∏–∫–∞ (–ö–æ–π—á—É–º–∞–Ω–æ–≤–∞ –ê.)",
            "–§–∏–∑–∏–∫–∞ (–¢–µ–ª—å—Ç–∞–µ–≤–∞ –ê.)",
            "–•–∏–º–∏—è (–°–∞–º–∞–∫–±–∞–µ–≤–∞ –ú.)"
        ],
        "2": [
            "3D –º–æ–¥–µ–ª–∏—Ä–æ–≤–∞–Ω–∏–µ (–ï—Ä–º–∞–∫–æ–≤ –û.)",
            "Data Acquisition and Webmapping (Grace Horman)",
            "English Composition 2 (–°–∞—Ä—Ç–∏–Ω–∏ –ú–∞–π–∫–ª)",
            "English Composition 2 (–•–∞–ª–º—É—Ä–∑–∞–µ–≤–∞ –ê.)",
            "Introduction to Cartography and ArcGIS (Grace Horman)",
            "Mathematical Analysis I (Burova Elena)",
            "–ê–ª–≥–æ—Ä–∏—Ç–º—ã –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö (–î–∂—É–º–∞–±–∞–µ–≤ –ù.)",
            "–ê–Ω–∞–ª–∏–∑ –∏ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö 2 (–î–∂—É–º–∞–≥—É–ª–æ–≤ –ö.)",
            "–ë–∏–∑–Ω–µ—Å-–º–æ–¥–µ–ª–∏—Ä–æ–≤–∞–Ω–∏–µ (–î–µ–ª—å—Ñ–∏–Ω –í.)",
            "–ë—É—Ö–≥–∞–ª—Ç–µ—Ä—Å–∫–∏–π —É—á–µ—Ç (–ì–∞–ª–∏–º–æ–≤–∞ –û.)",
            "–í–≤–µ–¥–µ–Ω–∏–µ –≤ –±—É—Ö–≥–∞–ª—Ç–µ—Ä—Å–∫–∏–π —É—á–µ—Ç (–ì–∞–ª–∏–º–æ–≤–∞ –û.)",
            "–ì–µ–æ–≥—Ä–∞—Ñ–∏—è –ö—ã—Ä–≥—ã–∑—Å—Ç–∞–Ω–∞ (–î–∂—É—Å—É–ø–æ–≤–∞ –ß.)",
            "–î–∏–∑–∞–π–Ω-–º—ã—à–ª–µ–Ω–∏–µ (–°—É–ª—Ç–∞–Ω–æ–≤–∞ –î.)",
            "–ó–µ–ª–µ–Ω–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ (–ö–æ—á–º–∞—Ä–µ–≤–∞ –õ.)",
            "–ò–Ω–Ω–æ–≤–∞—Ü–∏–∏: –∏—Å—Ç–æ—Ä–∏—è, –ª–æ–≥–∏–∫–∞, —Ç—Ä–µ–Ω–¥—ã (–ò–±—Ä–∞–∏–º–æ–≤ –ù.)",
            "–ò—Å–∫—É—Å—Å—Ç–≤–æ –∑–≤—É–∫–∞ –∏ –¥–∏–∑–∞–π–Ω (–û—Å–º–æ–Ω–æ–≤ –ú.)",
            "–ò—Å–∫—É—Å—Å—Ç–≤–æ –∏–ª–ª—é—Å—Ç—Ä–∞—Ü–∏–∏ (–ü—É—Ç—è—Ç–∏–Ω–∞ –û.)",
            "–ò—Å–∫—É—Å—Å—Ç–≤–æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –∏ –¥–∏–∑–∞–π–Ω (–ö–æ–π—á—É–±–µ–∫–æ–≤ –ñ.)",
            "–ò—Å—Ç–æ—Ä–∏—è –∏ –ª–æ–≥–∏–∫–∞ –ø—Ä–µ–¥–ø—Ä–∏–Ω–∏–º–∞—Ç–µ–ª—å—Å—Ç–≤–∞ (–£–º–µ—Ç–∞–ª–∏–µ–≤–∞ –ê.)",
            "–ò—Å—Ç–æ—Ä–∏—è –ö—ã—Ä–≥—ã–∑—Å—Ç–∞–Ω–∞ (–ö–∞–π–Ω–∞–∑–∞—Ä–æ–≤–∞ –ú.)",
            "–ö—Ä–µ–∞—Ç–∏–≤–Ω–æ–µ –º—ã—à–ª–µ–Ω–∏–µ –∏ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç (–ú–æ–≤—à—É–∫ –ê.)",
            "–õ–∏–¥–µ—Ä—Å—Ç–≤–æ –∏ –∫–æ–º–∞–Ω–¥–Ω–∞—è —Ä–∞–±–æ—Ç–∞ (–£—à–∞–∫–æ–≤–∞ –î.)",
            "–ú–∞–∫—Ä–æ—ç–∫–æ–Ω–æ–º–∏–∫–∞ (–ñ—É—Ä—Å—É–Ω –ò.)",
            "–ú–∞—Ä–∫–µ—Ç–∏–Ω–≥ (–£–º–µ—Ç–∞–ª–∏–µ–≤–∞ –ê.)",
            "–ú–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ 1 (–í–µ–π—Å –ü.)",
            "–ú–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã–µ –ø—Ä–∞–≤–∏–ª–∞ –∏ —Å—Ç–∞–Ω–¥–∞—Ä—Ç—ã (Boizeau P.)",
            "–û—Å–Ω–æ–≤—ã –≤–µ–±-—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ (–¢–∞—à–º–∞—Ç–æ–≤ –ê.)",
            "–û—Å–Ω–æ–≤—ã –¥–∏–∑–∞–π–Ω–∞ (–í–∞-–ê—Ö—É–Ω–æ–≤ –†.)",
            "–û—Å–Ω–æ–≤—ã –º–∞—à–∏–Ω–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è (–ê—Ç–∞–ª–æ–≤ –°.)",
            "–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –ü–û (–¢—É–ª—å—Ç–µ–º–∏—Ä–æ–≤–∞ –ì.)",
            "–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –ü–û 2 (–¢—É–ª—å—Ç–µ–º–∏—Ä–æ–≤–∞ –ì.)",
            "–°—Ç–∞—Ä—Ç–∞–ø-–º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç (–î–µ–ª—å—Ñ–∏–Ω –í.)",
            "–°—Ü–µ–Ω–∞—Ä–Ω–æ–µ –º–∞—Å—Ç–µ—Ä—Å—Ç–≤–æ (–®–∞–±–∞–ª–∏–Ω–∞ –ê.)",
            "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞–º–∏ (–°–∞–¥—ã–∫–æ–≤–∞ –ñ.)",
            "–¶–∏—Ñ—Ä–æ–≤–∞—è —ç–∫–æ–Ω–æ–º–∏–∫–∞ (–ò–±—Ä–∞–∏–º–æ–≤ –ù.)",
            "–≠–∫–æ–ª–æ–≥–∏—á–µ—Å–∫–∞—è —ç–∫–æ–Ω–æ–º–∏–∫–∞ (–ñ—É—Ä—Å—É–Ω –ò.)",
            "–≠–∫–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ –Ω–æ—Ä–º—ã –∏ –ø–æ–ª–∏—Ç–∏–∫–∞ (–ò–º–∞–Ω–æ–≤–∞ –°.)",
            "–≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ (–°—É–ª—Ç–∞–Ω–æ–≤–∞ –î.)",
            "–≠–Ω–µ—Ä–≥–æ—ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∑–¥–∞–Ω–∏–π (–¢–æ—Ä–æ–ø–æ–≤ –ú.)"
        ],
        "3": ["FYS 2 (–ë—Ä—é–ª–∏ –ñ.)",
            "FYS 2 (–°—É–ª—å–µ –ù.)",
            "Green Spaces in Urban Development (–ë—É–∞–∑–æ –§.)",
            "–ê–Ω–∞–ª–∏–∑ –∏ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö 4 (–ë–µ–≥–º–∞–Ω–æ–≤–∞ –ê.)",
            "–ê–Ω–∞–ª–∏–∑ –∏ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö 4 (–ö–∞—Ä–∏–º–æ–≤–∞ –î.)",
            "–ê–Ω–∞–ª–∏–∑ –∏ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö 4 (–ö—É–ª–¥–∞–Ω–±–∞–µ–≤–∞ –ú.)",
            "–ê–Ω–∞–ª–∏–∑ –∏ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö 4 (–ú—ã—Ä–∑–∞–≥—É–ª–æ–≤–∞ –ê.)",
            "–ê–Ω–∞–ª–∏–∑ —Ä—ã–Ω–∫–æ–≤ –í–µ—Å–Ω–∞ (–ö–æ–∫–∞–ª—é–∫ –ï.)",
            "–ê–Ω–∏–º–∞—Ü–∏—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –≤–∏–¥–µ–æ (–¢–æ–ª—É–±–∞–µ–≤ –ñ.)",
            "–ë–∏–∑–Ω–µ—Å-–ø—Ä–∞–≤–æ –∏ –Ω–∞–ª–æ–≥–∏ (–°–∞–º—Å–∞–ª–∏–µ–≤–∞ –ß.)",
            "–ë–∏–∑–Ω–µ—Å-—ç—Ç–∏–∫–∞ –∏ –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–∏ (–ò–º–∞–Ω–æ–≤–∞ –°.)",
            "–í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –∏ –∏–Ω—Ñ–æ–≥—Ä–∞—Ñ–∏–∫–∞ (–¢—É—Ä–¥—É–µ–≤–∞ –ë.)",
            "–í–∏–∑—É–∞–ª—å–Ω–æ–µ –º—ã—à–ª–µ–Ω–∏–µ (–ü—É—Ç—è—Ç–∏–Ω–∞ –û.)",
            "–í–∏–∑—É–∞–ª—å–Ω–æ–µ –ø–æ–≤–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ (–¢–æ–ª—É–±–∞–µ–≤ –ñ.)",
            "–î–∏–∑–∞–π–Ω-–∞–Ω—Ç—Ä–æ–ø–æ–ª–æ–≥–∏—è (–¢—É—Ä–¥–∏–µ–≤–∞ –ù.)",
            "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–∞—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –∏ –∑–∞—â–∏—Ç–∞ –¥–∞–Ω–Ω—ã—Ö (–°–∞—Ä—ã–±–∞–µ–≤–∞ –ê.)",
            "–ú–∞—Ä–∫–µ—Ç–∏–Ω–≥ (–£–º–µ—Ç–∞–ª–∏–µ–≤–∞ –ê.)",
            "–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞ –¥–ª—è –±–∏–∑–Ω–µ—Å–∞ 2 (–•—Ä—É—â–µ–≤–∞ –†.)",
            "–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞ –∏ —Ñ–∏–∑–∏–∫–∞ –¥–ª—è —ç–∫–æ–ª–æ–≥–∏–∏ (–ë—É–∞–∑–æ –§.)",
            "–ù–æ–≤–æ–µ –ø—Ä–µ–¥–ø—Ä–∏–Ω–∏–º–∞—Ç–µ–ª—å—Å—Ç–≤–æ (–£–º–µ—Ç–∞–ª–∏–µ–≤–∞ –ê.)",
            "–û—Å–Ω–æ–≤—ã –∫–∏–Ω–µ–º–∞—Ç–æ–≥—Ä–∞—Ñ–∏–∏ (–ö–æ–π—á—É–±–µ–∫–æ–≤ –ñ.)",
            "–û—Å–Ω–æ–≤—ã —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –∏–Ω–∂–∏–Ω–∏—Ä–∏–Ω–≥–∞ (–•—Ä–∏—Å—Ç–æ—Ñ–æ—Ä–∏–¥–∏ –î.)",
            "–ü—Ä–æ–µ–∫—Ç–Ω–æ–µ —Ñ–∏–Ω–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –¢–≠–û (–î–∂—É—Å—É–ø–æ–≤ –ê.)",
            "–ü—Ä–æ—Ç–æ—Ç–∏–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ (–í–∞-–∞—Ö—É–Ω–æ–≤ –†.)",
            "–ü—Ä–æ—Ç–æ—Ç–∏–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ DMDT (–í–∞-–∞—Ö—É–Ω–æ–≤ –†.)",
            "–°—Ç–∞—Ä—Ç–∞–ø —Ä–µ—Å—É—Ä—Å—ã: –º–æ–¥–µ–ª–∏ –∏ —Ç—Ä–µ–Ω–¥—ã (–î–µ–ª—å—Ñ–∏–Ω –í.)",
            "–°—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ë–î (–¢–∞—à–º–∞—Ç–æ–≤ –ê.)",
            "–¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏ –∞–Ω–∞–ª–∏–∑–∞ –¥–∞–Ω–Ω—ã—Ö (–ê—Ç–∞–ª–æ–≤ –°.)",
            "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—Ç—Ö–æ–¥–∞–º–∏ (–ö–µ–ª–≥–µ–Ω–±–∞–µ–≤–∞ –ö.)",
            "–£–ø—Ä–∞–≤–ª–µ–Ω—á–µ—Å–∫–∏–π —É—á–µ—Ç –¥–ª—è —Å—Ç–∞—Ä—Ç–∞–ø–æ–≤ (–ì–∞–ª–∏–º–æ–≤–∞ –û.)"
        ]
    };

    let selectedCourse = "1"; // –ó–∞–≥—Ä—É–∂–∞–µ–º 1 –∫—É—Ä—Å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    let selectedSubject = null;
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º/—Å–∫—Ä—ã–≤–∞–µ–º —Ñ–∏–ª—å—Ç—Ä –ø–æ–¥ –ø–æ–∏—Å–∫–æ–≤–æ–π —Å—Ç—Ä–æ–∫–æ–π
    filterButton.addEventListener("click", function () {
        filterContainer.style.display = filterContainer.style.display === "none" ? "block" : "none";
        loadSubjects(selectedCourse); // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–µ–¥–º–µ—Ç—ã –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –æ—Ç–∫—Ä—ã—Ç–∏–∏
    });

    // –í—ã–±–æ—Ä –∫—É—Ä—Å–∞
    courseButtons.forEach(button => {
        button.addEventListener("click", function () {
            courseButtons.forEach(btn => btn.classList.remove("active"));
            button.classList.add("active");

            selectedCourse = button.getAttribute("data-course");
            selectedSubject = null; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø—Ä–µ–¥–º–µ—Ç
            loadSubjects(selectedCourse);
            filterTutors(); // –§–∏–ª—å—Ç—Ä—É–µ–º —Ç—å—é—Ç–æ—Ä–æ–≤ –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –∫—É—Ä—Å–∞
        });
    });

    // –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∫—É—Ä—Å–∞
    function loadSubjects(course) {
        subjectsList.innerHTML = "";
        const subjects = subjectsByCourse[course] || [];

        subjects.forEach(subject => {
            const button = document.createElement("button");
            button.classList.add("subject-btn");
            button.textContent = subject;

            button.addEventListener("click", function () {
                if (button.classList.contains("active")) {
                    button.classList.remove("active");
                    selectedSubject = null;
                } else {
                    subjectsList.querySelectorAll(".subject-btn").forEach(btn => btn.classList.remove("active"));
                    button.classList.add("active");
                    selectedSubject = subject;
                }
                filterTutors(); // –§–∏–ª—å—Ç—Ä—É–µ–º —Ç—å—é—Ç–æ—Ä–æ–≤
            });

            subjectsList.appendChild(button);
        });

        filterTutors(); // –ï—Å–ª–∏ –ø—Ä–µ–¥–º–µ—Ç –Ω–µ –≤—ã–±—Ä–∞–Ω, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ—Ö
    }

    // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Ç—å—é—Ç–æ—Ä–æ–≤
    function filterTutors() {
        const tutorBlocks = document.querySelectorAll(".block");

        tutorBlocks.forEach(block => {
            const tutorCourse = block.getAttribute("data-course");
            const tutorSubject = block.getAttribute("data-subject");

            console.log(`–§–∏–ª—å—Ç—Ä—É–µ–º —Ç—å—é—Ç–æ—Ä–∞: –ö—É—Ä—Å: ${tutorCourse} | –ü—Ä–µ–¥–º–µ—Ç: ${tutorSubject}`);

            const matchesCourse = selectedCourse === null || tutorCourse === selectedCourse;
            const matchesSubject = selectedSubject === null || tutorSubject.includes(selectedSubject);

            block.style.display = matchesCourse && matchesSubject ? "flex" : "none";
        });
    }
    const resetFilterButton = document.querySelector(".reset-filter-btn");

    resetFilterButton.addEventListener("click", () => {
        // –°–Ω–∏–º–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –∫—É—Ä—Å—ã
        courseButtons.forEach(btn => btn.classList.remove("active"));
        selectedCourse = null;

        // –°–Ω–∏–º–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã
        selectedSubject = null;
        subjectsList.querySelectorAll(".subject-btn").forEach(btn => btn.classList.remove("active"));

        // –û—á–∏—â–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø—Ä–µ–¥–º–µ—Ç–æ–≤
        subjectsList.innerHTML = "";

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ—Ö —Ç—å—é—Ç–æ—Ä–æ–≤
        filterTutors();
    });
    document.querySelector('[data-course="1"]').click();
    loadTutors(); // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç—å—é—Ç–æ—Ä–æ–≤ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
});






document.querySelectorAll(".tutor-card").forEach(card => {
    card.addEventListener("click", () => {
        const tutorId = card.getAttribute("data-tutor-id");
        const registerBtn = document.getElementById("popup1-register");
        if (registerBtn && tutorId) {
            registerBtn.setAttribute("data-tutor-id", tutorId);
        }
    });
});

// 2. –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ó–∞–ø–∏—Å–∞—Ç—å—Å—è'
// –í—Å—Ç–∞–≤—å –≤–Ω—É—Ç—Ä—å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ document.getElementById("popup1-register").addEventListener(...)

document.getElementById("popup1-register").addEventListener("click", async () => {
    const btn = document.getElementById("popup1-register");
    const tutorId = btn.getAttribute("data-tutor-id");

    if (!tutorId) {
        alert("–û—à–∏–±–∫–∞: ID —Ç—å—é—Ç–æ—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω.");
        return;
    }

    try {
        const response = await fetch("/send-tutor-request/", {
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "X-CSRFToken": getCookie("csrftoken")
            },
            body: JSON.stringify({ tutor_id: tutorId })
        });
        

        const text = await response.text();
        console.log("üì¶ –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞:", text);

        try {
            const data = JSON.parse(text);
            if (data.status === "ok" || data.status === "already_requested") {
                btn.textContent = "‚è≥ –ó–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω...";
                btn.disabled = true;
                btn.style.cursor = "default";
                btn.classList.add("disabled");
            
                // üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Ç—å—é—Ç–æ—Ä–∞ –∏ –≤—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏
                const stored = JSON.parse(localStorage.getItem("requestedTutors")) || {};
                stored[tutorId] = Date.now();  // —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è
                localStorage.setItem("requestedTutors", JSON.stringify(stored));
            } else {
                alert("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–∏—Å—å–º–∞.");
            }
        } catch (e) {
            alert("‚ùå –û—Ç–≤–µ—Ç –Ω–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON:\n" + text);
        }

    } catch (error) {
        alert("–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: " + error);
    }
});


// 3. –ü–æ–ª—É—á–µ–Ω–∏–µ CSRF —Ç–æ–∫–µ–Ω–∞ –∏–∑ –∫—É–∫–∏
function getCookie(name) {
    let cookieValue = null;
    if (document.cookie && document.cookie !== '') {
        const cookies = document.cookie.split(';');
        for (let i = 0; i < cookies.length; i++) {
            const cookie = cookies[i].trim();
            if (cookie.substring(0, name.length + 1) === (name + '=')) {
                cookieValue = decodeURIComponent(cookie.substring(name.length + 1));
                break;
            }
        }
    }
    return cookieValue;
}



// –ï–°–õ–ò –ß–¢–û –ú–ï–ù–Ø–¢–¨ –¢–£–¢
function showConfirmationPopupIfNeeded() {
    const params = new URLSearchParams(window.location.search);
    const confirmed = params.get("confirmed");
    const studentId = params.get("student_id");

    if (confirmed === "1" && studentId) {
        const key = `confirmation_shown_for_${studentId}`;
        if (localStorage.getItem(key)) {
            console.log("üîÅ Popup —É–∂–µ –±—ã–ª –ø–æ–∫–∞–∑–∞–Ω –¥–ª—è —ç—Ç–æ–≥–æ —Å—Ç—É–¥–µ–Ω—Ç–∞.");
            return;
        }

        fetch("/get_csrf/").then(() => {
            const firstName = params.get("first_name") || "–ò–º—è";
            const lastName = params.get("last_name") || "–§–∞–º–∏–ª–∏—è";
            document.getElementById("confirmed-student-name").textContent = `${firstName} ${lastName}`;


            const popup = document.getElementById("confirmation-popup");
            const overlay = document.getElementById("confirmation-overlay");

            popup.classList.remove("hidden");
            popup.classList.add("visible");

            overlay.classList.remove("hidden");
            overlay.classList.add("visible");

            document.body.style.overflow = "hidden";

            // üíæ –ü–æ–º–µ—á–∞–µ–º, —á—Ç–æ popup —É–∂–µ –ø–æ–∫–∞–∑–∞–Ω –¥–ª—è —ç—Ç–æ–≥–æ —Å—Ç—É–¥–µ–Ω—Ç–∞
            localStorage.setItem(key, "true");

            // üîÑ –£–¥–∞–ª–∏–º query-–ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ—Å–ª–µ –ø–æ–∫–∞–∑–∞
            const newUrl = window.location.origin + window.location.pathname;
            window.history.replaceState({}, document.title, newUrl);
        });
    }
}

showConfirmationPopupIfNeeded();

function closeConfirmationPopup() {
    const popup = document.getElementById("confirmation-popup");
    const overlay = document.getElementById("confirmation-overlay");

    popup.classList.add("hidden");
    popup.classList.remove("visible");

    overlay.classList.add("hidden");
    overlay.classList.remove("visible");

    document.body.style.overflow = "";
}

