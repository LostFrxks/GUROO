function getCSRFToken() {
    return document.cookie.split("; ")
        .find(row => row.startsWith("csrftoken="))
        ?.split("=")[1];
}

function loadNotificationCount() {
    fetch('/get_notifications/')
        .then(response => response.json())
        .then(data => {
            const countEl = document.getElementById("notification-count");
            if (!countEl) {
                console.warn("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω #notification-count");
                return;
            }

            const tutorRequests = data.notifications.filter(n => n.type === "tutor_request");
            console.log("üì¨ –ù–∞–π–¥–µ–Ω–æ tutor_request:", tutorRequests.length);

            if (tutorRequests.length > 0) {
                countEl.textContent = tutorRequests.length;
                countEl.style.display = 'inline-block';
            } else {
                countEl.textContent = '0';
                countEl.style.display = 'none';
            }
        })
        .catch(error => console.error("‚ùå –û—à–∏–±–∫–∞ —Å—á—ë—Ç—á–∏–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:", error));
}

let userId = null;
let currentScreen = "tutors";
let lessonState = {
    topic: "",
    location: "",
    showFields: false
};


document.addEventListener("DOMContentLoaded", function () {
    console.log("‚úÖ –°–∫—Ä–∏–ø—Ç –∑–∞–≥—Ä—É–∂–µ–Ω");
    loadNotificationCount();
    setTimeout(loadNotificationCount, 50);
    const popup = document.getElementById("profile-popup");
    const popupOverlay = document.getElementById("popup-overlay");

    let userIdElement = document.querySelector("#user-id");
    userId = userIdElement ? userIdElement.textContent.trim() : null;

    console.log("üîµ User ID:", userId);

    let userRoleElement = document.querySelector("#user-role");
    let userRole = userRoleElement ? userRoleElement.textContent.trim() : "student";
    console.log("üò∫ User Role:", userRole);

    let userNameElement = document.getElementById("user-name");
    let userName = userNameElement ? userNameElement.textContent.trim() : "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π";
    console.log("üë§ –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", userName);

    const profileButton = document.getElementById("profile-button");
    const closePopupButton = document.getElementById("close-popup");
    const tutorsList = document.getElementById("registered-tutors");
    const studentName = document.getElementById("student-name");

    
    // **–°–æ–∑–¥–∞–µ–º –≤—ã–ø–∞–¥–∞—é—â–µ–µ –º–µ–Ω—é –ø—Ä–æ—Ñ–∏–ª—è**
    const profileMenu = document.createElement("div");
    profileMenu.classList.add("profile-menu", "hidden");
    document.body.appendChild(profileMenu);


    const lessonsPopup = document.getElementById("lessons-popup");
    const lessonsOverlay = document.getElementById("lessons-overlay");
    const lessonsList = document.getElementById("my-lessons-list");
    const noLessonsMsg = document.getElementById("no-lessons-msg");

    function renderProfileMenu() {
        profileMenu.innerHTML = `
        <ul>
            ${userRole === "tutor" ? `<li id="my-lessons-btn">üìÜ –ú–æ–∏ —É—Ä–æ–∫–∏</li>` : ""}
            <li id="show-tutors">üìö –í–∞—à–∏ —Ç—å—é—Ç–æ—Ä—ã</li>
            ${userRole === "tutor" ? `<li><a href="/edit_tutor_profile/">üìÑ –ú–æ—è –∞–Ω–∫–µ—Ç–∞</a></li>` : ""}
            <li id="logout">üö™ –í—ã–π—Ç–∏</li>
        </ul>
        `;

        const logoutBtn = document.getElementById("logout");
        const showTutorsBtn = document.getElementById("show-tutors");
        const myLessonsBtn = document.getElementById("my-lessons-btn");

        if (logoutBtn) {
            logoutBtn.addEventListener("click", () => logoutUser());
        }

        if (showTutorsBtn) {
            showTutorsBtn.addEventListener("click", () => {
                console.log("üì£ –ö–ª–∏–∫ –ø–æ –∫–Ω–æ–ø–∫–µ '–í–∞—à–∏ —Ç—å—é—Ç–æ—Ä—ã'");
                studentName.textContent = (userRole === "tutor" ? "–¢—å—é—Ç–æ—Ä: " : "–°—Ç—É–¥–µ–Ω—Ç: ") + userName;
                loadRegisteredTutors();
                popupOverlay.style.display = "block"; // ‚¨ÖÔ∏è —Ñ–∏–∫—Å
                popup.style.display = "block";

                popup.classList.remove("hidden");
                popupOverlay.classList.remove("hidden");
                popup.classList.add("visible");
                popupOverlay.classList.add("visible");
            });
        }

        if (myLessonsBtn) {
            myLessonsBtn.addEventListener("click", () => {
                fetch(`/get_my_lessons/?tutor_id=${userId}`)
                    .then(res => res.json())
                    .then(data => {
                        lessonsList.innerHTML = "";
                        const showFields = data.show_fields;
                        lessonState.showFields = showFields;
                        lessonState.topic = data.topic || "";
                        lessonState.location = data.location || "";
                                                
                        const saveButton = lessonsPopup.querySelector("#save-lesson");

                        document.getElementById("save-lesson")?.classList.toggle("hidden", !showFields);

        
                        const divider = document.createElement("hr");
                        lessonsList.appendChild(divider);
        
                        if (!data.lessons || data.lessons.length === 0) {
                            noLessonsMsg.style.display = "block";
                            return;
                        }
        
                        noLessonsMsg.style.display = "none";
        
                        data.lessons.forEach((student) => {
                            const li = document.createElement("li");
                            li.classList.add("lesson-entry");
        
                            li.innerHTML = `üë§ <strong>${student.first_name} ${student.last_name}</strong> (${student.group || "–≥—Ä—É–ø–ø–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞"})`;
        
                            lessonsList.appendChild(li);
                        });
                    });
        
                lessonsPopup.classList.add("visible");
                lessonsOverlay.classList.add("visible");
            });
        }
        

        const closeLessonsBtn = document.getElementById("close-lessons");

        if (closeLessonsBtn) {
            closeLessonsBtn.addEventListener("click", () => {
                lessonsPopup.classList.remove("visible");
                lessonsOverlay.classList.remove("visible");
            });
        }
        if (lessonsOverlay) {
            lessonsOverlay.addEventListener("click", () => {
                lessonsPopup.classList.remove("visible");
                lessonsOverlay.classList.remove("visible");
            });
        }

        const closePopupBtn = document.getElementById("close-popup");
        if (closePopupBtn) {
            closePopupBtn.addEventListener("click", () => {
                popup.classList.remove("visible");
                popupOverlay.classList.remove("visible");
                popup.classList.add("hidden");
                popupOverlay.classList.add("hidden");
                popup.style.display = "none"; // üëà –≤–æ—Ç —ç—Ç–æ
                popupOverlay.style.display = "none"; // üëà –∏ —ç—Ç–æ
            });
        }
        
        if (popupOverlay) {
            popupOverlay.addEventListener("click", () => {
                popup.classList.remove("visible");
                popupOverlay.classList.remove("visible");
                popup.classList.add("hidden");
                popupOverlay.classList.add("hidden");
                popup.style.display = "none"; // üëà —Å–Ω–æ–≤–∞
                popupOverlay.style.display = "none";
            });
        }
        
    }
    
    function logoutUser() {
        console.log("üî¥ –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ logout...");

        fetch("/logout/", {
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "X-CSRFToken": getCSRFToken()
            },
            credentials: "include"
        })
        .then(response => {
            if (!response.ok) {
                throw new Error(`–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: ${response.status}`);
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                console.log("‚úÖ –£—Å–ø–µ—à–Ω—ã–π –≤—ã—Ö–æ–¥:", data.message);

                // ‚ùóÔ∏è –û—á–∏—Å—Ç–∫–∞ –∫–µ—à–∞ –±—Ä–∞—É–∑–µ—Ä–∞
                window.location.href = "/login/";
                window.location.replace("/login/");  // –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–µ–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏
                window.history.pushState({}, "", "/login/"); // –û—á–∏—â–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –ø–µ—Ä–µ—Ö–æ–¥–æ–≤

                // ‚ùóÔ∏è –û—á–∏—â–∞–µ–º –∫—É–∫–∏
                document.cookie.split(";").forEach(function(c) { 
                    document.cookie = c.replace(/^ +/, "").replace(/=.*/, "=;expires=" + new Date().toUTCString() + ";path=/"); 
                });

            } else {
                console.error("‚ùå –û—à–∏–±–∫–∞ –≤—ã—Ö–æ–¥–∞:", data.message);
            }
        })
        .catch(error => console.error("–û—à–∏–±–∫–∞ –≤—ã—Ö–æ–¥–∞:", error));
    }

    function toggleProfileMenu() {
        console.log("üßë‚Äçüéì –û—Ç–∫—Ä—ã–≤–∞–µ–º –º–µ–Ω—é –ø—Ä–æ—Ñ–∏–ª—è");

        const rect = avatar.getBoundingClientRect();  // –ü–æ–ª—É—á–∞–µ–º –ø–æ–∑–∏—Ü–∏—é –∞–≤–∞—Ç–∞—Ä–∞

        profileMenu.style.position = "absolute";
        profileMenu.style.top = `${rect.bottom + 10}px`;  // –†–∞–∑–º–µ—â–∞–µ–º –º–µ–Ω—é –ø–æ–¥ –∞–≤–∞—Ç–∞—Ä–æ–º
        profileMenu.style.left = `${rect.left}px`;
        profileMenu.style.width = "180px";  // –®–∏—Ä–∏–Ω–∞ –º–µ–Ω—é

        const isVisible = profileMenu.classList.toggle("visible");

        if (isVisible) {
            profileMenu.classList.remove("hidden");
            profileMenu.style.opacity = "1";
            profileMenu.style.visibility = "visible";
            profileMenu.style.transform = "translateY(0)";
        } else {
            profileMenu.style.opacity = "0";
            profileMenu.style.visibility = "hidden";
            profileMenu.style.transform = "translateY(-10px)";
        }

        if (lessonsOverlay) {
            lessonsOverlay.addEventListener("click", () => {
                lessonsPopup.classList.remove("visible");
                lessonsOverlay.classList.remove("visible");
            });
        }
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –Ω–∞ –∞–≤–∞—Ç–∞—Ä
    avatar.addEventListener("click", function (event) {
        event.stopPropagation();  // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–ª—å–Ω–µ–π—à–µ–µ —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è
        toggleProfileMenu();  // –û—Ç–∫—Ä—ã–≤–∞–µ–º/–∑–∞–∫—Ä—ã–≤–∞–µ–º –º–µ–Ω—é
    });

    // –ó–∞–∫—Ä—ã—Ç–∏–µ –º–µ–Ω—é –ø—Ä–∏ –∫–ª–∏–∫–µ –≤–Ω–µ –º–µ–Ω—é –∏–ª–∏ –∞–≤–∞—Ç–∞—Ä–∞
    document.addEventListener("click", function (event) {
        if (!profileMenu.contains(event.target) && !avatar.contains(event.target)) {
            profileMenu.classList.remove("visible");
            profileMenu.style.opacity = "0";
            profileMenu.style.visibility = "hidden";
            profileMenu.style.transform = "translateY(-10px)";
        }
    });
    
    renderProfileMenu();

    if (!profileButton) {
        console.warn("‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω ‚Äî —Å–∫—Ä—ã–≤–∞–µ–º –ø–æ–ø–∞–ø.");
        if (popup) popup.style.display = "none";
        if (popupOverlay) popupOverlay.style.display = "none";
        return;
    }
    profileButton.addEventListener("click", function (event) {
        event.stopPropagation();
        toggleProfileMenu();
    });

    document.addEventListener("click", function (event) {
        if (!profileMenu.contains(event.target) && !profileButton.contains(event.target)) {
            profileMenu.classList.remove("visible");
            profileMenu.style.opacity = "0";
            profileMenu.style.visibility = "hidden";
            profileMenu.style.transform = "translateY(-10px)";
        }
    });

    // **–§—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ —Å–ø–∏—Å–∫–∞ —Ç—å—é—Ç–æ—Ä–æ–≤**
    function loadRegisteredTutors() {
        console.log("üìå –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç—å—é—Ç–æ—Ä–æ–≤...");
        fetch(`/get_schedule_with_attendance/`)
            .then(response => response.json())
            .then(data => {
                tutorsList.innerHTML = "";
                const tutors = data.schedule || [];
    
                if (!tutors.length) {
                    tutorsList.innerHTML = "<li>–í—ã –ø–æ–∫–∞ –Ω–µ –∑–∞–ø–∏—Å–∞–Ω—ã –Ω–∏ –∫ –∫–æ–º—É</li>";
                    return;
                }
    
                tutors.forEach(tutor => {
                    const wrapper = document.createElement("div");
                    wrapper.classList.add("tutor-card");
    
                    const mainInfo = document.createElement("div");
                    mainInfo.classList.add("tutor-main");
    
                    const name = document.createElement("div");
                    name.innerHTML = `<strong>${tutor.tutor_name}</strong><br>${tutor.subject}`;
                    name.classList.add("tutor-name");
    
                    const toggleBtn = document.createElement("button");
                    toggleBtn.innerHTML = "‚¨áÔ∏è";
                    toggleBtn.classList.add("toggle-schedule-btn");
    
                    mainInfo.appendChild(name);
                    mainInfo.appendChild(toggleBtn);
                    wrapper.appendChild(mainInfo);
    
                    const scheduleBlock = document.createElement("div");
                    scheduleBlock.classList.add("schedule-block", "hidden");
    
                    if (!tutor.schedule.length) {
                        scheduleBlock.innerHTML = "<p>–ù–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è</p>";
                    } else {
                        tutor.schedule.forEach(s => {
                            const pair = document.createElement("div");
                            pair.classList.add("pair-block");
                            pair.innerHTML = `<strong>${s.day}</strong> ‚Äî ${s.time}`;
    
                            // –ï—Å–ª–∏ –º–æ–∂–Ω–æ –æ—Ç–º–µ—Ç–∏—Ç—å—Å—è, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É
                            if (s.can_mark && !tutor.already_marked) {
                                const markBtn = document.createElement("button");
                                markBtn.textContent = "‚úÖ –û—Ç–º–µ—Ç–∏—Ç—å—Å—è";
                                markBtn.classList.add("mark-button");
    
                                markBtn.addEventListener("click", () => {
                                    fetch("/submit_attendance/", {
                                        method: "POST",
                                        headers: {
                                            "Content-Type": "application/json",
                                            "X-CSRFToken": getCSRFToken()
                                        },
                                        body: JSON.stringify({
                                            tutor_id: tutor.tutor_id
                                        })
                                    }).then(r => r.json())
                                      .then(res => {
                                          if (res.success) {
                                              alert("–í—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ—Ç–∏–ª–∏—Å—å!");
                                              loadRegisteredTutors(); // –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –≤—Å—ë
                                          } else {
                                              alert(res.error || "–û—à–∏–±–∫–∞");
                                          }
                                      });
                                });
    
                                pair.appendChild(markBtn);
                            }
    
                            scheduleBlock.appendChild(pair);
                        });
                    }
    
                    wrapper.appendChild(scheduleBlock);
                    tutorsList.appendChild(wrapper);
    
                    toggleBtn.addEventListener("click", () => {
                        scheduleBlock.classList.toggle("hidden");
                        scheduleBlock.classList.toggle("expanded");
                        toggleBtn.textContent = scheduleBlock.classList.contains("hidden") ? "‚¨áÔ∏è" : "‚¨ÜÔ∏è";
                    });
                });
            })
            .catch(error => {
                console.error("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç—å—é—Ç–æ—Ä–æ–≤:", error);
                tutorsList.innerHTML = "<li>–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö</li>";
            });
    }
    
    

    function openTutorSchedule(tutorId, tutorName) {
        fetch(`/get_schedule_with_attendance/`)
            .then(res => res.json())
            .then(data => {
                const popup = document.getElementById("tutor-schedule-popup");
                const overlay = document.getElementById("popup-overlay");
                const list = document.getElementById("tutor-schedule-list");
                const title = document.getElementById("tutor-name-title");
                const form = document.getElementById("attendance-form");
    
                list.innerHTML = "";
                form.classList.add("hidden");
                title.textContent = `–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ: ${tutorName}`;
    
                let found = data.schedule.find(t => t.tutor_id == tutorId);
                if (!found) {
                    list.innerHTML = "<li>–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–∞—Ä</li>";
                } else {
                    found.schedule.forEach(s => {
                        const li = document.createElement("li");
                        li.innerHTML = `${s.day}, ${s.time} ${s.can_mark ? "‚úÖ <button class='mark-btn'>–û—Ç–º–µ—Ç–∏—Ç—å—Å—è</button>" : ""}`;
                        list.appendChild(li);
    
                        if (s.can_mark && !found.already_marked) {
                            form.classList.remove("hidden");
                            document.getElementById("submit-attendance").onclick = function () {
                                const topic = document.getElementById("lesson-topic").value;
                                const location = document.getElementById("lesson-location").value;
                                fetch("/submit_attendance/", {
                                    method: "POST",
                                    headers: {
                                        "Content-Type": "application/json",
                                        "X-CSRFToken": getCSRFToken()
                                    },
                                    body: JSON.stringify({
                                        tutor_id: tutorId,
                                        topic: topic,
                                        location: location
                                    })
                                }).then(r => r.json())
                                .then(res => {
                                    if (res.success) {
                                        alert("–í—ã –æ—Ç–º–µ—Ç–∏–ª–∏—Å—å!");
                                        popup.classList.remove("visible");
                                        overlay.classList.remove("visible");
                                    } else {
                                        alert(res.error || "–û—à–∏–±–∫–∞");
                                    }
                                });
                            };
                        }
                    });
                }
    
                popup.classList.add("visible");
                overlay.classList.add("visible");
            });
    }


        // üîí –ó–∞–∫—Ä—ã—Ç–∏–µ popup —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è —Ç—å—é—Ç–æ—Ä–∞
    const schedulePopup = document.getElementById("tutor-schedule-popup");
    const closeScheduleBtn = document.getElementById("close-schedule-popup");

    if (closeScheduleBtn) {
        closeScheduleBtn.addEventListener("click", () => {
            schedulePopup.classList.remove("visible");
            document.getElementById("popup-overlay").classList.remove("visible");
        });
    }
});



document.addEventListener("DOMContentLoaded", function () {
    const notificationBell = document.querySelector("#notification-bell i");
    const notificationCount = document.getElementById("notification-count");  // –°—á–µ—Ç—á–∏–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    const notificationPopup = document.getElementById("notification-popup");
    const notificationsList = document.getElementById("notifications-list");
    const closeNotificationsButton = document.getElementById("close-notifications");
    const popupOverlay = document.getElementById("popup-overlay");

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—á–µ—Ç—á–∏–∫–∞
    function loadNotifications() {
        fetch('/get_notifications/')
            .then(response => response.json())
            .then(data => {
                notificationsList.innerHTML = '';
                if (data.notifications.length === 0) {
                    document.getElementById("no-notifications-msg").style.display = 'block';
                    notificationCount.style.display = 'none';
                } else {
                    document.getElementById("no-notifications-msg").style.display = 'none';
                    data.notifications.forEach(notification => {
                        const li = document.createElement("li");
            
                        // ‚úÖ –ë–∏—à–∫–µ–∫—Å–∫–æ–µ –≤—Ä–µ–º—è
                        const utcDate = new Date(notification.timestamp);
                        const bishkekDate = utcDate.toLocaleString("ru-RU", {
                            timeZone: "Asia/Bishkek",
                            hour: "2-digit",
                            minute: "2-digit",
                            day: "2-digit",
                            month: "2-digit",
                            year: "numeric"
                        });
            
                        li.innerHTML = `${notification.message} <br><small>${bishkekDate}</small>`;
                        notificationsList.appendChild(li);
                    });
            
                    notificationCount.textContent = data.notifications.length;
                    notificationCount.style.display = 'inline-block';
                }
            
                notificationPopup.classList.add("visible");
            })
            .catch(error => console.error("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:", error));
    }

    notificationBell.addEventListener("click", () => {
        loadNotifications();
        notificationPopup.classList.remove("hidden");
        popupOverlay.classList.remove("hidden");
        notificationPopup.style.display = "block";
        popupOverlay.style.display = "block";
        notificationPopup.classList.add("visible");
        popupOverlay.classList.add("visible");
    });

    // –ó–∞–∫—Ä—ã—Ç–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    closeNotificationsButton.addEventListener("click", function () {
        popupOverlay.classList.remove("visible");
        notificationPopup.style.display = "none";
        popupOverlay.style.display = "none";    
    });
    popupOverlay.addEventListener("click", function(){
        popupOverlay.classList.remove("visible");
        notificationPopup.style.display = "none";
        popupOverlay.style.display = "none";    
    });
    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π, –∫–æ–≥–¥–∞ —Ç—å—é—Ç–æ—Ä –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç —Å—Ç—É–¥–µ–Ω—Ç–∞
    function sendAcceptanceNotification(studentId, tutorName, subject) {
        fetch('/send_acceptance_notification/', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'X-CSRFToken': getCSRFToken(),
            },
            body: JSON.stringify({
                student_id: studentId,
                tutor_name: tutorName,
                subject: subject
            })
        })
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                console.log('–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ');
            }
        })
        .catch(error => console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:', error));
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ CSRF —Ç–æ–∫–µ–Ω–∞
    function getCSRFToken() {
        return document.cookie.split("; ")
            .find(row => row.startsWith("csrftoken="))
            ?.split("=")[1];
    }
}); 


document.addEventListener("click", function (e) {
    if (e.target.classList.contains("inline-approve")) {
        const studentId = e.target.dataset.studentId;
        const tutorId = e.target.dataset.tutorId;

        fetch("/confirm-via-notification/", {
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "X-CSRFToken": getCSRFToken()
            },
            body: JSON.stringify({ student_id: studentId, tutor_id: tutorId })
        })
        .then(res => res.json())
        .then(data => {
            if (data.success) {
                e.target.parentElement.innerHTML = `–í—ã –ø—Ä–∏–Ω—è–ª–∏ –∑–∞—è–≤–∫—É –æ—Ç ${e.target.dataset.studentName}`;
            }
        });
    }

    if (e.target.classList.contains("inline-decline")) {
        const studentId = e.target.dataset.studentId;
        const tutorId = e.target.dataset.tutorId;
        const studentName = e.target.dataset.studentName;
    
        fetch("/decline-tutor-request/", {
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "X-CSRFToken": getCSRFToken()
            },
            body: JSON.stringify({ student_id: studentId, tutor_id: tutorId })
        })
        .then(res => res.json())
        .then(data => {
            if (data.success) {
                e.target.parentElement.innerHTML = `‚ùå –í—ã –æ—Ç–∫–ª–æ–Ω–∏–ª–∏ –∑–∞—è–≤–∫—É –æ—Ç ${studentName}`;
            } else {
                e.target.parentElement.innerHTML = "‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è";
            }
        })
        .catch(err => {
            console.error("–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è:", err);
            e.target.parentElement.innerHTML = "‚ö†Ô∏è –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è";
        });
    }




// === –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏–π ===
// === –ü–µ—Ä–µ—Ö–æ–¥ –∫ —ç–∫—Ä–∞–Ω—É —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –∏ –≤–≤–æ–¥–∞ —Ç–µ–º—ã/–º–µ—Å—Ç–∞ ===
function goToLessonScreen() {
    currentScreen = "lesson";

    const lessonsList = document.getElementById("my-lessons-list");
    const noLessonsMsg = document.getElementById("no-lessons-msg");
    const backBtn = document.getElementById("back-to-tutors");
    const title = document.getElementById("lessons-title");
    const topicInput = document.getElementById("lesson-topic");
    const locationInput = document.getElementById("lesson-location");
    const scheduleList = document.getElementById("lesson-schedule");

    // üëá –í—Ä–µ–º—è –ø–∞—Ä
    const lessonTimes = {
        "1": "08:00 ‚Äî 9:20",
        "2": "09:30 ‚Äî 10:50",
        "3": "11:40 ‚Äî 13:00",
        "4": "13:10 ‚Äî 14:30",
        "5": "14:40 ‚Äî 16:00",
        "6": "16:10 ‚Äî 17:30",
        "7": "17:40 ‚Äî 19:00"
    };

    // üîÑ –°–∫—Ä—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–π —ç–∫—Ä–∞–Ω
    if (lessonsList) lessonsList.classList.add("hidden");
    if (noLessonsMsg) noLessonsMsg.style.display = "none";
    if (backBtn) backBtn.classList.remove("hidden");
    if (title) title.textContent = "–£—Ä–æ–∫:";

    // üîÑ –ó–∞–≥—Ä—É–∂–∞–µ–º —Å —Å–µ—Ä–≤–µ—Ä–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∏ show_fields
    fetch(`/get_my_lessons/?tutor_id=${userId}`)
        .then(res => res.json())
        .then(data => {
            const showFields = data.show_fields;
            lessonState.showFields = showFields;  // —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ

            // üéØ –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–ª–∏ —Å–∫—Ä—ã–≤–∞–µ–º –ø–æ–ª—è
            if (topicInput) {
                topicInput.classList.remove("hidden");
                topicInput.value = lessonState.topic || "";
                topicInput.style.display = lessonState.showFields ? "block" : "none";
            }
            if (locationInput) {
                locationInput.classList.remove("hidden");
                locationInput.value = lessonState.location || "";
                locationInput.style.display = lessonState.showFields ? "block" : "none";
            }
            console.log(topicInput);
            console.log(locationInput);

            console.log("üì¶ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–∏—à–ª–æ:", data.schedule);
            console.log("üìå –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –ø–æ–ª—è?", showFields);

            const dayOrder = ["–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", "–í—Ç–æ—Ä–Ω–∏–∫", "–°—Ä–µ–¥–∞", "–ß–µ—Ç–≤–µ—Ä–≥", "–ü—è—Ç–Ω–∏—Ü–∞", "–°—É–±–±–æ—Ç–∞", "–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ"];

            // üìÖ –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
            if (data.schedule && scheduleList) {
                scheduleList.innerHTML = ""; // –æ—á–∏—Å—Ç–∫–∞

                Object.entries(data.schedule)
                    .sort(([dayA], [dayB]) => dayOrder.indexOf(dayA) - dayOrder.indexOf(dayB))
                    .forEach(([day, pairNums]) => {
                        const sortedPairs = pairNums.map(Number).sort((a, b) => a - b);

                        sortedPairs.forEach(pairNum => {
                            const div = document.createElement("div");
                            div.className = "pair-block";

                            const time = lessonTimes[pairNum];
                            div.innerText = time
                                ? `${day}, ${time}`
                                : `${day}, –ø–∞—Ä–∞ ‚Ññ${pairNum}`;

                            console.log("üß± –î–æ–±–∞–≤–ª–µ–Ω –±–ª–æ–∫:", div.innerText);
                            scheduleList.appendChild(div);
                        });
                    });
            } else {
                console.warn("‚ö†Ô∏è –ù–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è", data.schedule);
            }
        });
}


// === –í–æ–∑–≤—Ä–∞—Ç –∫ —Å–ø–∏—Å–∫—É —Ç—å—é—Ç–∏ ===
function goToTutorsScreen() {
    currentScreen = "tutors";
    const lessonsList = document.getElementById("my-lessons-list");
    const noLessonsMsg = document.getElementById("no-lessons-msg");
    const backBtn = document.getElementById("back-to-tutors");
    const topicInput = document.getElementById("lesson-topic");
    const locationInput = document.getElementById("lesson-location");
    console.log("üìé topicInput:", topicInput);
    console.log("üìé locationInput:", locationInput);
    

    const scheduleList = document.getElementById("lesson-schedule");
    const title = document.getElementById("lessons-title");
    if (title) title.textContent = "–í–∞—à–∏ —Ç—å—é—Ç–∏:";
    if (topicInput) {
        topicInput.classList.add("hidden");
        topicInput.style.display = "none";
    }
    if (locationInput) {
        locationInput.classList.add("hidden");
        locationInput.style.display = "none";
    }
    
    if (lessonsList) lessonsList.classList.remove("hidden");
    if (noLessonsMsg) noLessonsMsg.style.display = "block";
    if (backBtn) backBtn.classList.add("hidden");
    if (scheduleList) scheduleList.innerHTML = "";
}

// === –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª–µ–π ===
document.getElementById("lesson-topic")?.addEventListener("input", e => {
    lessonState.topic = e.target.value;
});
document.getElementById("lesson-location")?.addEventListener("input", e => {
    lessonState.location = e.target.value;
});

window.goToLessonScreen = goToLessonScreen;
window.goToTutorsScreen = goToTutorsScreen;

});

