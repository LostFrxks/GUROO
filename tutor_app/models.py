from django.db import models
from django.contrib.auth.models import AbstractUser, BaseUserManager
from django.conf import settings
from django.core.exceptions import ValidationError
from django.core.files.storage import default_storage
import hashlib
import os
import uuid
from django.db.models.signals import post_save
from django.dispatch import receiver
print("üì¶ [DEBUG] models.py –∑–∞–≥—Ä—É–∂–µ–Ω!")


# ‚úÖ –ú–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–±–µ–∑ username)
class CustomUserManager(BaseUserManager):
    def create_user(self, email, password=None, **extra_fields):
        if not email:
            raise ValueError("–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å email")
        email = self.normalize_email(email)
        user = self.model(email=email, **extra_fields)
        user.set_password(password)
        user.save(using=self._db)
        return user

    def create_superuser(self, email, password=None, **extra_fields):
        extra_fields.setdefault("is_staff", True)
        extra_fields.setdefault("is_superuser", True)
        return self.create_user(email, password, **extra_fields)


class CustomUser(AbstractUser):
    username = None  # ‚ùå –£–±–∏—Ä–∞–µ–º username
    email = models.EmailField(unique=True)  # ‚úÖ Email –≤–º–µ—Å—Ç–æ username
    telegram_id = models.BigIntegerField(null=True, blank=True, unique=True)
    is_tutor = models.BooleanField(default=False)
    group = models.CharField(max_length=50, blank=True, null=True)
    first_name = models.CharField(max_length=30, blank=True, null=True)  # ‚úÖ –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞—Ç–Ω–æ
    last_name = models.CharField(max_length=30, blank=True, null=True)  # ‚úÖ –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞—Ç–Ω–æ

    ROLE_CHOICES = [
        ('student', '–°—Ç—É–¥–µ–Ω—Ç'),
        ('tutor', '–¢—å—é—Ç–æ—Ä'),
    ]
    role = models.CharField(max_length=10, choices=ROLE_CHOICES, default='student')
    profile_picture = models.ImageField(upload_to='avatars/', blank=True, null=True)

    objects = CustomUserManager()

    USERNAME_FIELD = "email"
    REQUIRED_FIELDS = []

    def save(self, *args, **kwargs):
        if self.role == "tutor":
            self.is_tutor = True
        else:
            self.is_tutor = False
        super().save(*args, **kwargs)

    def get_initials(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω–∏—Ü–∏–∞–ª—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–µ—Å–ª–∏ –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—è —É–∫–∞–∑–∞–Ω—ã)."""
        return f"{self.first_name[0].upper()}{self.last_name[0].upper()}" if self.first_name and self.last_name else "UU"

    def __str__(self):
        return self.email



# ‚úÖ –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è —Ñ–æ—Ç–æ
def validate_image_extension(value):
    ext = os.path.splitext(value.name)[1].lower()
    valid_extensions = ['.jpg', '.jpeg', '.png']
    if ext not in valid_extensions:
        raise ValidationError('‚ùå –†–∞–∑—Ä–µ—à–µ–Ω—ã —Ç–æ–ª—å–∫–æ —Ñ–∞–π–ª—ã .jpg, .jpeg –∏ .png.')


# ‚úÖ –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è —Ö–µ—à–∞ —Ñ–∞–π–ª–∞ (—á—Ç–æ–±—ã –Ω–µ –∑–∞–≥—Ä—É–∂–∞—Ç—å –¥—É–±–ª–∏–∫–∞—Ç—ã —Ñ–æ—Ç–æ)
def get_file_hash(file):
    hasher = hashlib.sha256()
    for chunk in file.chunks():
        hasher.update(chunk)
    return hasher.hexdigest()


# ‚úÖ –ú–æ–¥–µ–ª—å –∞–Ω–∫–µ—Ç—ã —Ç—å—é—Ç–æ—Ä–∞
class TutorProfile(models.Model):
    DAYS_OF_WEEK = [
        ('Monday', '–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫'),
        ('Tuesday', '–í—Ç–æ—Ä–Ω–∏–∫'),
        ('Wednesday', '–°—Ä–µ–¥–∞'),
        ('Thursday', '–ß–µ—Ç–≤–µ—Ä–≥'),
        ('Friday', '–ü—è—Ç–Ω–∏—Ü–∞'),
        ('Saturday', '–°—É–±–±–æ—Ç–∞'),
    ]

    COURSE_CHOICES = [
        (1, '1 –∫—É—Ä—Å'),
        (2, '2 –∫—É—Ä—Å'),
        (3, '3 –∫—É—Ä—Å'),
    ]

    user = models.OneToOneField(settings.AUTH_USER_MODEL, on_delete=models.CASCADE, related_name="tutor_profile")
    group = models.CharField(max_length=20, verbose_name="–ì—Ä—É–ø–ø–∞", blank=True, null=True)
    telegram = models.CharField(max_length=255, blank=True, null=True)
    phone = models.CharField(max_length=255, blank=True, null=True)
    first_name = models.CharField(max_length=30, blank=True, null=True)  # ‚úÖ –î–æ–±–∞–≤–ª—è–µ–º
    last_name = models.CharField(max_length=30, blank=True, null=True)   # ‚úÖ –î–æ–±–∞–≤–ª—è–µ–º
    subject = models.CharField(max_length=255, verbose_name="–ü—Ä–µ–¥–º–µ—Ç")
    own_course = models.IntegerField(null=True, blank=True)  # üëà –ö—É—Ä—Å —Å–∞–º–æ–≥–æ —Ç—å—é—Ç–æ—Ä–∞ (—É–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏)
    course = models.IntegerField(choices=COURSE_CHOICES, verbose_name="–ö—É—Ä—Å", default=1)
    bio = models.TextField(verbose_name="–û —Å–µ–±–µ", null=True, blank=True)
    last_lesson_topic = models.CharField(max_length=255, blank=True, null=True)
    last_lesson_location = models.CharField(max_length=255, blank=True, null=True)
    excel_generated = models.BooleanField(default=False)

    photo = models.ImageField(
        upload_to="tutors_photos",
        null=True,
        blank=True,
        verbose_name="–§–æ—Ç–æ",
        default="tutors_photos/def.png"
    )
    schedule = models.JSONField(default=dict, verbose_name="–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ")

    def save(self, *args, **kwargs):
        """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–æ–±–∞–≤–ª—è–µ—Ç –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é –∏–∑ `user`, –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç"""
        if not self.user.first_name or not self.user.last_name:
            raise ValueError("‚ùå –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—è!")

        if self.photo and not self.photo.name.endswith("default.png"):
            file_hash = get_file_hash(self.photo)
            existing_files = default_storage.listdir("tutors_photos/")[1]

            for existing_file in existing_files:
                existing_path = os.path.join(settings.MEDIA_ROOT, "tutors_photos", existing_file)
                if os.path.exists(existing_path):
                    with open(existing_path, "rb") as existing_f:
                        existing_hash = hashlib.sha256(existing_f.read()).hexdigest()
                        if existing_hash == file_hash:
                            self.photo.name = f"tutors_photos/{existing_file}"
                            break

        super().save(*args, **kwargs)

    def __str__(self):
        return f"–ê–Ω–∫–µ—Ç–∞ —Ç—å—é—Ç–æ—Ä–∞: {self.user.email} (–ö—É—Ä—Å {self.course})"


# ‚úÖ –ú–æ–¥–µ–ª—å —Å–≤—è–∑–∏ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –∏ —Ç—å—é—Ç–æ—Ä–æ–≤
class TutorStudent(models.Model):
    tutor = models.ForeignKey(TutorProfile, on_delete=models.CASCADE, related_name="students")  
    student = models.ForeignKey(settings.AUTH_USER_MODEL, on_delete=models.CASCADE, related_name="tutors")  
    confirmed = models.BooleanField(default=False)
    attended = models.BooleanField(default=False)  # ‚úÖ –ë—ã–ª –ª–∏ —Å—Ç—É–¥–µ–Ω—Ç –Ω–∞ –≤—Å—Ç—Ä–µ—á–µ

    attendance_time = models.DateTimeField(null=True, blank=True)  # –ù–æ–≤–æ–µ –ø–æ–ª–µ!
    topic = models.CharField(max_length=255, null=True, blank=True)  # –¢–µ–º–∞ —É—Ä–æ–∫–∞
    location = models.CharField(max_length=255, null=True, blank=True)  
    class Meta:
        unique_together = ('tutor', 'student')

    def __str__(self):
        return f"{self.student.email} –∑–∞–ø–∏—Å–∞–ª—Å—è –∫ {self.tutor.user.first_name} {self.tutor.user.last_name}"


# ‚úÖ –¢–æ–∫–µ–Ω—ã –¥–ª—è –∏–Ω–≤–∞–π—Ç–∞ —Ç—å—é—Ç–æ—Ä–æ–≤
class TutorInviteToken(models.Model):
    token = models.CharField(max_length=50, unique=True)
    email = models.EmailField(unique=True)  
    is_used = models.BooleanField(default=False)  
    created_at = models.DateTimeField(auto_now_add=True)  
    student = models.ForeignKey(settings.AUTH_USER_MODEL, on_delete=models.CASCADE, null=True, blank=True)

    def __str__(self):
        return f"–¢–æ–∫–µ–Ω –¥–ª—è {self.email} (–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω: {self.is_used})"


# ‚úÖ –°–æ–∑–¥–∞–≤–∞—Ç—å `TutorProfile` –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Ç—å—é—Ç–æ—Ä–∞
@receiver(post_save, sender=settings.AUTH_USER_MODEL)
def create_tutor_profile(sender, instance, created, **kwargs):
    if created and instance.role == "tutor":
        TutorProfile.objects.create(user=instance)


# models.py
class Notification(models.Model):
    user = models.ForeignKey(CustomUser, on_delete=models.CASCADE)  # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –∫–æ—Ç–æ—Ä–æ–º—É –ø—Ä–∏—à–ª–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    message = models.CharField(max_length=512)
    timestamp = models.DateTimeField(auto_now_add=True)
    is_read = models.BooleanField(default=False)  # –°—Ç–∞—Ç—É—Å –ø—Ä–æ—á—Ç–µ–Ω–æ/–Ω–µ –ø—Ä–æ—á–∏—Ç–∞–Ω–æ

    def __str__(self):
        return f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è {self.user.email}: {self.message[:50]}..."
